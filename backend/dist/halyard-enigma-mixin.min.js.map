{"version":3,"file":"halyard-enigma-mixin.min.js","sources":["../src/enigma-mixin/halyard-enigma-mixin.js","../src/enigma-mixin/utils.js"],"sourcesContent":["import convertQixGetLocalInfo from './utils';\n\nconst CONNECTION_ERROR = 'Connection Error';\nconst LOADING_ERROR = 'Loading Error';\nconst SYNTAX_ERROR = 'Syntax Error';\n/**\n * Create error message\n * @private\n * @param {string} errorType\n * @param {object} qixError\n * @param {(Table|HyperCube)} item\n * @returns {{type: string, message: string, item: object, qixError: string}}\n */\nfunction createErrorMessage(errorType, qixError, item) {\n  return {\n    type: errorType,\n    message: qixError.message || qixError.qErrorString,\n    item,\n    qixError,\n  };\n}\n\nconst halyardMixin = {\n  types: 'Global',\n  init(args) {\n    if (args.config) {\n      args.api.Promise = args.config.Promise;\n    } else {\n      args.api.Promise = args.Promise;\n    }\n  },\n  extend: {\n    /**\n     * Creates a session app based on the model in the halyard instance\n     * @public\n     * @param {Halyard} halyard - A halyard instance\n     * @returns {Promise.<TResult>}\n     */\n    createSessionAppUsingHalyard(halyard) {\n      const that = this;\n      return that.createSessionApp().then(app => that.setScriptAndReloadWithHalyard(app, halyard, false));\n    },\n\n    /**\n     * Creates an app with the model in the halyard instance.\n     * @public\n     * @param {string} appName\n     * @param {Halyard} halyard\n     * @returns {Promise.<TResult>}\n     */\n    createAppUsingHalyard(appName, halyard) {\n      const that = this;\n      return that.createApp(appName).then((app) => {\n        const appId = app.qAppId;\n        return that.openDoc(appId).then(result => that.setScriptAndReloadWithHalyard(result, halyard, true));\n      });\n    },\n\n    /**\n     * Reloads an existing app with the model in the halyard instance. Can also create an app is createIfMissing is set to true.\n     * @public\n     * @param {string} existingAppName\n     * @param {Halyard} halyard\n     * @param {boolean} createIfMissing\n     * @returns {Promise.<TResult>}\n     */\n    reloadAppUsingHalyard(existingAppName, halyard, createIfMissing) {\n      const that = this;\n      return that.openDoc(existingAppName)\n        .catch((error) => {\n          const COULD_NOT_FIND_APP = 1003;\n\n          if (createIfMissing && error.code === COULD_NOT_FIND_APP) {\n            return that.createApp(existingAppName).then(app => that.openDoc(app.qAppId));\n          }\n          return that.Promise.reject(error);\n        })\n        .then(result => that.setScriptAndReloadWithHalyard(result, halyard, true));\n    },\n\n    /**\n     * Use the model in halyard to set the script of an app and save it\n     * @public\n     * @param {object} app\n     * @param {Halyard} halyard\n     * @param {boolean} doSaveAfterReload\n     * @returns {Promise.<TResult>}\n     */\n    setScriptAndReloadWithHalyard(app, halyard, doSaveAfterReload) {\n      const that = this;\n      const deferredConnections = [];\n\n      halyard.getConnections().forEach((connection) => {\n        const qixConnectionObject = connection.getQixConnectionObject();\n        if (qixConnectionObject) {\n          const connectionPromise = app.createConnection(qixConnectionObject)\n            .then(result => result, (err) => {\n              const LOCERR_CONNECTION_ALREADY_EXISTS = 2000;\n\n              // Will not throw error if connection already exists.\n              // The connections guid makes the connections unique and we assumes that it\n              // is the same that was previously created\n              if (!(err.code && err.code === LOCERR_CONNECTION_ALREADY_EXISTS)) {\n                throw createErrorMessage(CONNECTION_ERROR, err, connection);\n              }\n            });\n\n          deferredConnections.push(connectionPromise);\n        }\n      });\n\n      return that.Promise.all(deferredConnections).then(() => app.getLocaleInfo().then((localeInfoResult) => {\n        halyard.setDefaultSetStatements(convertQixGetLocalInfo(localeInfoResult), true);\n        return app.globalApi.configureReload(true, true, false).then(() => app.setScript(halyard.getScript())\n          .then(() => app.doReload().then(() => app.globalApi.getProgress(0).then((progressResult) => {\n            if (progressResult.qErrorData.length !== 0) {\n              return app.checkScriptSyntax().then((syntaxCheckData) => {\n                if (syntaxCheckData.length === 0) {\n                  throw createErrorMessage(LOADING_ERROR, progressResult.qErrorData[0]);\n                } else {\n                  const item = halyard.getItemThatGeneratedScriptAt(syntaxCheckData[0].qTextPos);\n                  throw createErrorMessage(SYNTAX_ERROR, progressResult.qErrorData[0], item);\n                }\n              });\n            }\n\n            if (doSaveAfterReload) {\n              return app.doSave().then(() => app);\n            }\n\n            return app;\n          }))));\n      }));\n    },\n  },\n};\n\n\nconst exposeGlobalApi = {\n  types: 'Doc',\n  init(args) {\n    const getObjectArgs = {\n      handle: -1,\n      id: 'Global',\n      type: 'Global',\n    };\n    if (args.config) {\n      getObjectArgs.genericType = 'Global';\n    } else {\n      getObjectArgs.customType = 'Global';\n      getObjectArgs.delta = true;\n    }\n    args.api.globalApi = args.api.session.getObjectApi(getObjectArgs);\n  },\n};\n\nmodule.exports = [halyardMixin, exposeGlobalApi];\n","/**\n * @public\n * @param {{qThousandSep: string, qDecimalSep: string, qMoneyThousandSep: string, qMoneyDecimalSep: string, qMoneyFmt: string,\n * qTimeFmt: string, qDateFmt: string, qTimestampFmt: string, qFirstWeekDay: string, qReferenceDay: string,\n * qFirstMonthOfYear: string, qCollation: string, qMonthNames: string,\n * qLongMonthNames: string, qDayNames: string, qLongDayNames: string }} localInfoData\n * @returns {{ThousandSep: string, DecimalSep: string, MoneyThousandSep: string, MoneyDecimalSep: string,\n * MoneyFormat: string, TimeFormat: string, DateFormat: string, TimestampFormat: string, FirstWeekDay: string,\n * ReferenceDay: string, FirstMonthOfYear: string, CollationLocale: string, MonthNames: string, LongMonthNames: string,\n * DayNames: string, LongDayNames: string}}\n */\nexport default function convertQixGetLocalInfo(localInfoData) {\n  return {\n    ThousandSep: localInfoData.qThousandSep,\n    DecimalSep: localInfoData.qDecimalSep,\n    MoneyThousandSep: localInfoData.qMoneyThousandSep,\n    MoneyDecimalSep: localInfoData.qMoneyDecimalSep,\n    MoneyFormat: localInfoData.qMoneyFmt,\n    TimeFormat: localInfoData.qTimeFmt,\n    DateFormat: localInfoData.qDateFmt,\n    TimestampFormat: localInfoData.qTimestampFmt,\n    FirstWeekDay: localInfoData.qFirstWeekDay,\n    ReferenceDay: localInfoData.qReferenceDay,\n    FirstMonthOfYear: localInfoData.qFirstMonthOfYear,\n    CollationLocale: localInfoData.qCollation,\n    MonthNames: localInfoData.qCalendarStrings.qMonthNames,\n    LongMonthNames: localInfoData.qCalendarStrings.qLongMonthNames,\n    DayNames: localInfoData.qCalendarStrings.qDayNames,\n    LongDayNames: localInfoData.qCalendarStrings.qLongDayNames,\n  };\n}\n"],"names":["createErrorMessage","errorType","qixError","item","type","message","qErrorString","halyardMixin","types","init","args","config","api","Promise","extend","createSessionAppUsingHalyard","halyard","that","this","createSessionApp","then","app","setScriptAndReloadWithHalyard","createAppUsingHalyard","appName","createApp","appId","qAppId","openDoc","result","reloadAppUsingHalyard","existingAppName","createIfMissing","catch","error","code","reject","doSaveAfterReload","deferredConnections","getConnections","forEach","connection","qixConnectionObject","getQixConnectionObject","connectionPromise","createConnection","err","push","all","getLocaleInfo","localeInfoResult","localInfoData","setDefaultSetStatements","ThousandSep","qThousandSep","DecimalSep","qDecimalSep","MoneyThousandSep","qMoneyThousandSep","MoneyDecimalSep","qMoneyDecimalSep","MoneyFormat","qMoneyFmt","TimeFormat","qTimeFmt","DateFormat","qDateFmt","TimestampFormat","qTimestampFmt","FirstWeekDay","qFirstWeekDay","ReferenceDay","qReferenceDay","FirstMonthOfYear","qFirstMonthOfYear","CollationLocale","qCollation","MonthNames","qCalendarStrings","qMonthNames","LongMonthNames","qLongMonthNames","DayNames","qDayNames","LongDayNames","qLongDayNames","globalApi","configureReload","setScript","getScript","doReload","getProgress","progressResult","qErrorData","length","checkScriptSyntax","syntaxCheckData","getItemThatGeneratedScriptAt","qTextPos","doSave","module","exports","getObjectArgs","handle","id","genericType","customType","delta","session","getObjectApi"],"mappings":"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"}