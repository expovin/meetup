{"version":3,"file":"halyard.js","sources":["../src/utils/utils.js","../src/connections/connection-base.js","../src/connections/file.js","../src/connections/web-file.js","../src/connections/inline-data.js","../src/connections.js","../src/utils/json-to-csv.js","../src/connection-matcher.js","../src/default-connection-matcher.js","../src/utils/format-specification.js","../src/table.js","../src/utils/hyper-cube-specification.js","../src/utils/hyper-cube-utils.js","../src/hyper-cube.js","../src/set-statement.js","../src/derived-fields-template.js","../src/calendar-derived-fields.js","../src/halyard.js"],"sourcesContent":["/**\n * Get folder path from file path\n * @private\n * @param {string} path\n * @returns {string}\n */\nexport function folderPath(path) {\n  let folderPathMatch = path.match(/^(.*)(\\\\.*\\..*$|\\\\.*)$/);\n\n  if (folderPathMatch) {\n    return folderPathMatch[1];\n  }\n\n  // Unix file path check\n  folderPathMatch = path.match(/^(.*)(\\/.*\\..*$|\\/.*)$/);\n\n  return folderPathMatch && folderPathMatch[1];\n}\n\n/**\n * Get file name from file path\n * @private\n * @param {string} path\n * @returns {string}\n */\nexport function fileName(path) {\n  let fileNameMatch = path.match(/^.*\\\\(.*\\..*|.*)$/);\n\n  if (fileNameMatch) {\n    return fileNameMatch[1];\n  }\n\n  fileNameMatch = path.match(/^.*\\/(.*\\..*|.*)$/);\n\n  return fileNameMatch && fileNameMatch[1];\n}\n\n/**\n * Get file extension from file path\n * @private\n * @param {string} path\n * @returns {string}\n */\nexport function fileExtension(path) {\n  const fileExtensionMatch = path.match(/^.*\\.(.*)$/);\n\n  return fileExtensionMatch && fileExtensionMatch[1];\n}\n\n/**\n * Escape text with double quotes\n * @private\n * @param {string} text\n * @returns {string}\n */\nexport function escapeText(text) {\n  return text.replace(/\"/g, '\"\"');\n}\n\n/**\n * Get a unique name\n * @private\n * @returns {string}\n */\nexport function uniqueName() {\n  /* eslint no-bitwise: [\"off\"] */\n  /* eslint no-mixed-operators: [\"off\"] */\n\n  return 'xxxxx-8xxxx-yxxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Validate the field type\n * @private\n * @param {string} type\n * @returns {boolean}\n */\nexport function validFieldType(type) {\n  const validFieldTypes = ['time', 'timestamp', 'date', 'interval'];\n\n  type = type || '';\n\n  return validFieldTypes.indexOf(type.toLowerCase()) > -1;\n}\n\n/**\n * Get indentation characters\n * @private\n * @returns {string}\n */\nexport function indentation() {\n  return '  ';\n}\n\n/**\n * Get the field name\n * @private\n * @param {Field} field\n * @returns {string}\n */\nexport function getFieldName(field) {\n  return field.name || field.src;\n}\n","import { uniqueName } from '../utils/utils';\n\n/**\n * A base set of methods used by Connections\n * @typedef {object} Connection\n * @property {string} path - The Path to a resource\n * @property {string} connectionType - The type can be either 'folder' or 'internet'\n */\n\nclass ConnectionBase {\n  /**\n   * A base set of methods used by Connections\n   * @public\n   * @param {string} path - The Path to a resource\n   * @param {string} connectionType - The type can be either 'folder' or 'internet'\n   * @class\n   */\n  constructor(path, connectionType) {\n    this.path = path;\n    this.connectionType = connectionType;\n    this.fileExtension = '';\n  }\n\n  /**\n   * Returns specified file extension.\n   * @public\n   * @returns {string}\n   */\n  getFileExtension() {\n    return this.fileExtension;\n  }\n\n  /**\n   * Get specified connection type.\n   * @public\n   * @returns {string}\n   */\n  getConnectionType() {\n    return this.connectionType;\n  }\n\n  /**\n   * Get the QIX representation of a connection.\n   * @public\n   * @returns {{qName: (string), qConnectionString: (string), qType: (string)}}\n   */\n  getQixConnectionObject() {\n    return {\n      qName: this.getName(),\n      qConnectionString: this.path,\n      qType: this.getConnectionType(),\n    };\n  }\n\n  /**\n   * Get the name and if nothing is set then it will receive a unique name\n   * @public\n   * @returns {string}\n   */\n  getName() {\n    if (!this.name) {\n      this.name = uniqueName();\n    }\n\n    return this.name;\n  }\n\n  /**\n   * Get the lib statement used in the load script to connect to a connection\n   * @public\n   * @returns {string}\n   */\n  getLibStatement() {\n    return `lib://${this.getName()}`;\n  }\n\n  /**\n   * Get the load script for this connection\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    return `FROM [${this.getLibStatement()}]`;\n  }\n}\n\nexport default ConnectionBase;\n","import ConnectionBase from './connection-base';\nimport * as Utils from '../utils/utils';\n\nclass FileConnection extends ConnectionBase {\n  /**\n   * File Connection representation. It will create a folder connection in QIX.\n   * @public\n   * @param {string} path - Absolute file path\n   * @constructor\n   */\n  constructor(path) {\n    super(Utils.folderPath(path), 'folder');\n\n    this.fileName = Utils.fileName(path);\n\n    this.fileExtension = Utils.fileExtension(path) || 'txt';\n  }\n\n  /**\n   * Get the lib statement for the specified file path\n   * @public\n   * @returns {string}\n   */\n  getLibStatement() {\n    return `${super.getLibStatement()}/${this.fileName}`;\n  }\n}\n\nexport default FileConnection;\n","import ConnectionBase from './connection-base';\n\nclass WebFileConnection extends ConnectionBase {\n  /**\n   * Web file connector structure. It will setup everything to create a QIX internet connection.\n   * @public\n   * @param {string} url\n   * @param {string} fileExtension\n   */\n  constructor(url, fileExtension) {\n    super(url, 'internet');\n\n    const fileExtensionMatch = url.match(/^https?:\\/\\/.*\\/.*\\.(\\w*)\\?.*$/)\n      || url.match(/^https?:\\/\\/.*\\/.*\\.(\\w*)$/);\n\n    this.fileExtension = fileExtension || (fileExtensionMatch && fileExtensionMatch[1]) || 'html';\n  }\n}\nexport default WebFileConnection;\n","import ConnectionBase from './connection-base';\nimport * as Utils from '../utils/utils';\n\nclass InlineData extends ConnectionBase {\n  /**\n   * Inline data representation. This is typically CSV formatted data.\n   * @public\n   * @param {string} data\n   * @constructor\n   */\n  constructor(data) {\n    super();\n\n    this.data = data;\n\n    this.fileExtension = 'txt';\n  }\n\n  /**\n   * Get the load script representation\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    return `INLINE \"\\n${Utils.escapeText(this.data)}\\n\"`;\n  }\n\n  /**\n   * Get lib statement but there are none for inline data\n   * @private\n   */\n  getLibStatement() {\n  }\n\n  /**\n   * Get the QAE connection object but there are none for inline data\n   * @private\n   */\n  getQixConnectionObject() {\n  }\n}\n\nexport default InlineData;\n","import FileConnection from './connections/file';\nimport WebConnection from './connections/web-file';\nimport InlineData from './connections/inline-data';\n\n/**\n * Default set of Connections that are available\n * @constant\n * @type {object}\n */\nexport default {\n  File: FileConnection,\n  Web: WebConnection,\n  Inline: InlineData,\n};\n","/**\n * Escape values containing delimiter\n * @private\n * @param {string} data\n * @param {string} delimiter\n * @returns {string}\n */\nfunction escapeValueContainingDelimiter(data, delimiter) {\n  if (data && typeof data === 'string' && (data.indexOf(delimiter) > -1 || data.indexOf('\\n') > -1)) {\n    return `\"${data.replace(/\"/g, '\"\"').replace(/\\n/g, ' ')}\"`;\n  }\n\n  return data;\n}\n\n/**\n * Convert array date to a string in a csv format\n * @private\n * @param {array} data\n * @returns {string}\n */\nexport function convert(data) {\n  if (data instanceof Array === false) {\n    data = [data];\n  }\n\n  let csv = '';\n  const delimiter = ',';\n\n  const headers = Object.keys(data[0]);\n\n  csv = `${csv + headers.map(header => escapeValueContainingDelimiter(header, delimiter))\n    .join(delimiter)}\\n`;\n\n  let fields = [];\n\n  for (let i = 0; i < data.length; i += 1) {\n    fields = [];\n\n    for (let j = 0; j < headers.length; j += 1) {\n      fields.push(escapeValueContainingDelimiter(data[i][headers[j]], delimiter));\n    }\n\n    csv = `${csv + fields.join(delimiter)}\\n`;\n  }\n\n  csv = csv.slice(0, -('\\n'.length));\n\n  return csv;\n}\n\n/**\n * Validate that the data is an JSON array\n * @private\n * @param {array} data\n * @returns {boolean}\n */\nexport function isJson(data) {\n  if (data instanceof Array) {\n    if (data[0] && typeof data[0] === 'object') {\n      return true;\n    }\n  }\n\n  return false;\n}\n","class ConnectionLookup {\n  /**\n   * Utility to add a matching function and a connection type to make it easier to implicitly choose a connection\n   * @private\n   * @constructor\n   */\n  constructor() {\n    this.connectionsRegistry = [];\n  }\n\n  /**\n   * Connection matching callback to identify which connection to use for an implicitly declared source.\n   * @callback connectionMatchingCallback\n   * @param {string} data - Url, file path, csv data\n   * @returns {Connection}\n   */\n\n  /**\n   * Add a matching function with a connection instance\n   * @private\n   * @param {connectionMatchingCallback} matchingFn - Matching function to decide what connection function to invoke\n   * @param {Connection} connection - Callback that returns a Connection instance\n   */\n  addConnection(matchingFn, connection) {\n    this.connectionsRegistry.push({\n      matchingFn,\n      connection,\n    });\n  }\n\n  /**\n   * Find a match for connection based on the input data\n   * @private\n   * @param {string} data - The data can be an Url, a file path or a csv data blob\n   * @returns {object}\n   */\n  findMatch(data) {\n    for (let i = 0; i < this.connectionsRegistry.length; i += 1) {\n      if (this.connectionsRegistry[i].matchingFn(data)) {\n        return this.connectionsRegistry[i].connection(data);\n      }\n    }\n\n    return data;\n  }\n}\n\nexport default ConnectionLookup;\n","import Connections from './connections';\nimport * as JsonToCsv from './utils/json-to-csv';\nimport ConnectionMatcher from './connection-matcher';\n\nconst connectionMatcher = new ConnectionMatcher();\n\n// url to a table file\nconnectionMatcher.addConnection(data => typeof data === 'string' && data.match(/^https?:\\/\\/(.*)$/g), data => new Connections.Web(data));\n\n// Path to a table file\nconnectionMatcher.addConnection(data => typeof data === 'string' && data.match(/^.*\\.(.*)$/g), data => new Connections.File(data));\n\n// Inline JSON table to csv\nconnectionMatcher.addConnection(\n  data => data instanceof Array && JsonToCsv.isJson(data),\n  data => new Connections.Inline(JsonToCsv.convert(data)),\n);\n\n// Inline csv table\nconnectionMatcher.addConnection(data => typeof data === 'string', data => new Connections.Inline(data));\n\nexport default connectionMatcher;\n","import { escapeText } from './utils';\n\n/**\n * Validates supported character sets\n * @private\n * @param {string} characterSet\n * @returns {boolean|string}\n */\nfunction supportedCharacterSet(characterSet) {\n  const validCharacterSets = ['utf8', 'unicode', 'ansi', 'oem', 'mac'];\n\n  return (validCharacterSets.indexOf(characterSet) > -1 && characterSet)\n    || (Number(characterSet).toString() !== 'NaN' && `codepage is ${characterSet}`);\n}\n\n/**\n * Get the QIX specific format of a file\n * @private\n * @param {{ fileExtension: string, headerRowNr: number, delimiter: string, characterSet: string, srcTable: string, noLabels: boolean }} options\n * @returns {string}\n */\nexport default function formatSpecification(options) {\n  if (!options) {\n    options = {};\n  }\n\n  const formatSpecificationArr = [];\n\n  if (options.fileExtension) {\n    let fileFormat = options.fileExtension;\n\n    if (fileFormat === 'xlsx') {\n      fileFormat = 'ooxml';\n    }\n\n    if (fileFormat === 'csv') {\n      fileFormat = 'txt';\n    }\n\n    if (fileFormat === 'htm') {\n      fileFormat = 'html';\n    }\n\n    formatSpecificationArr.push(fileFormat);\n  }\n\n  if (options.headerRowNr || options.headerRowNr === 0) {\n    formatSpecificationArr.push(`header is ${options.headerRowNr} lines`);\n    // Should be included if header row is specified!\n    formatSpecificationArr.push('embedded labels');\n  }\n\n  if (options.delimiter) {\n    formatSpecificationArr.push(`delimiter is '${options.delimiter}'`);\n  }\n\n  if (options.characterSet && supportedCharacterSet(options.characterSet)) {\n    formatSpecificationArr.push(supportedCharacterSet(options.characterSet));\n  }\n\n  if (options.srcTable) {\n    formatSpecificationArr.push(`table is \"${escapeText(options.srcTable)}\"`);\n  }\n\n  if (options.noLabels) {\n    formatSpecificationArr.push('no labels');\n  }\n\n  let formatSpecificationString = '';\n\n  if (formatSpecificationArr.length > 0) {\n    formatSpecificationString = `\\n(${formatSpecificationArr.join(', ')})`;\n  }\n\n  return formatSpecificationString;\n}\n","import defaultConnectionMatcher from './default-connection-matcher';\nimport formatSpecification from './utils/format-specification';\nimport { escapeText, validFieldType, indentation } from './utils/utils';\n\nclass Table {\n  /**\n   * Table definition\n   * @public\n   * @class\n   * @param {Connection} connection\n   * @param {object} options - Table options\n   * @param {string} options.name - Table name\n   * @param {Field[]} options.fields - Array of field objects\n   * @param {string} options.prefix - Add prefix before the table\n   * @param {string} options.section - Section to add table to\n   * @constructor\n   */\n  constructor(connection, options) {\n    this.connection = defaultConnectionMatcher.findMatch(connection);\n\n    options = options || {};\n\n    if (typeof options === 'string') {\n      this.name = options;\n      options = {};\n    } else {\n      this.name = options.name;\n      this.fields = options.fields;\n      this.prefix = options.prefix;\n      if (options.section) {\n        this.section = options.section;\n      }\n    }\n\n    this.options = options;\n  }\n\n  /**\n   * @typedef {object} Field\n   * @public\n   * @property {string} src - Name in the data source of the field\n   * @property {string} name - Name after reload\n   * @property {string} type - Date, Time, TimeStamp\n   * @property {string} inputFormat - Input format to explain how a field should be parsed.\n   * @property {string} displayFormat - Display format that should be used after reload.\n   * @property {string} expr - Customize how this field should be loaded with Qlik Script.\n   */\n\n  /**\n   * Get the fields from a table\n   * @public\n   * @returns {Field[]} Array of fields\n   */\n  getFields() {\n    return this.fields;\n  }\n\n  /**\n   * Get the script representation of the field list. If nothing is specified than all the fields will be returned.\n   * @public\n   * @returns {string}\n   */\n  getFieldList() {\n    if (this.fields) {\n      return this.fields.map((field) => {\n        let formattedInput = `\"${escapeText(field.src || '')}\"`;\n\n        if (validFieldType(field.type)) {\n          const format = field.type.toUpperCase();\n\n          if (field.inputFormat) {\n            formattedInput = `${format}#(${formattedInput}, '${field.inputFormat}')`;\n          }\n\n          if (field.displayFormat) {\n            formattedInput = `${format}(${formattedInput}, '${field.displayFormat}')`;\n          } else {\n            formattedInput = `${format}(${formattedInput})`;\n          }\n        }\n\n        if (field.expr) {\n          formattedInput = field.expr;\n        }\n\n\n        if (!(field.name || field.src)) {\n          throw (new Error(`A name or src needs to specified on the field: ${JSON.stringify(field)}`));\n        }\n\n        return `${indentation() + formattedInput} AS \"${escapeText(field.name || field.src)}\"`;\n      }).join(',\\n');\n    }\n\n    return '*';\n  }\n\n  /**\n   * Is the table used as a proceeding load\n   * @public\n   * @returns {boolean}\n   */\n  isProceedingLoad() {\n    return this.connection instanceof Table;\n  }\n\n  /**\n   * Returns the specified prefix of the table if it exists.\n   * The prefix can be for instance be a Qlik script snippet that always should be executed before the table is loaded.\n   * @public\n   * @returns {string}\n   */\n  getPrefix() {\n    if (this.prefix) {\n      return `${this.prefix}\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Get the script representation of the table\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    // In the future this could be moved into a connectionMatcher\n    // but for sake of clarity it is kept inline.\n    if (this.isProceedingLoad()) {\n      return `${this.getPrefix()}LOAD\\n${this.getFieldList()};\\n${this.connection.getScript()}`;\n    }\n\n    // Hack!\n    if (this.connection.getFileExtension) {\n      this.options.fileExtension = this.connection.getFileExtension();\n    }\n\n    return `${this.getPrefix()}LOAD\\n${this.getFieldList()}\\n${this.connection.getScript()}${formatSpecification(this.options)};`;\n  }\n\n  /**\n   * Get the name of the table\n   * @public\n   * @returns {string}\n   */\n  getName() {\n    return this.name || '';\n  }\n\n  /**\n   * Get the section that the table belongs to\n   * @public\n   * @returns {string}\n   */\n  getSection() {\n    return this.section;\n  }\n\n  /**\n   * Returns the connection or table that the table uses.\n   * @public\n   * @returns {(Connection|Table)} Connection or Table\n   */\n  getConnection() {\n    return this.connection;\n  }\n}\n\nexport default Table;\n","/**\n * @constant\n * @type {{timestamp: string, date: string, time: string, interval: string}}\n */\nconst qTypes = {\n  timestamp: 'TS',\n  date: 'D',\n  time: 'T',\n  interval: 'IV',\n};\n\n/**\n * @constant\n * @type {{timestamp: string, text: string, numeric: string}}\n */\nconst qDimensionType = {\n  timestamp: 'T',\n  text: 'D',\n  numeric: 'N',\n};\n\nexport default {\n  qTypes,\n  qDimensionType,\n};\n","import hyperCubeSpecification from './hyper-cube-specification';\n\nconst DEFAULT_DELIMITER = ',';\n\n/**\n * If a dimension has mixed types\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeMixed(dimension) {\n  return (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qTags.length === 0\n  );\n}\n\n/**\n * Is dimension type a text\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeText(dimension) {\n  return dimension.qDimensionType === hyperCubeSpecification.qDimensionType.text;\n}\n\n/**\n * Is dimension type a timestamp\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeTimestamp(dimension) {\n  if (dimension.qDimensionType === hyperCubeSpecification.qDimensionType.timestamp) {\n    return true;\n  }\n  if (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.timestamp\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Is dimension type a date\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeDate(dimension) {\n  if (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.date\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Is dimension type a time\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeTime(dimension) {\n  if (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.time\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Is dimension type an interval\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeInterval(dimension) {\n  if (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.interval\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Get dimension type where the dimension matches one of the following text, mixed, timestamp, time, data, interval or num.\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {string}\n */\nexport function getDimensionType(dimension) {\n  if (isDimensionTypeText(dimension)) {\n    return 'text';\n  }\n  if (isDimensionTypeMixed(dimension)) {\n    return 'mixed';\n  }\n  if (isDimensionTypeTimestamp(dimension)) {\n    return 'timestamp';\n  }\n  if (isDimensionTypeTime(dimension)) {\n    return 'time';\n  }\n  if (isDimensionTypeDate(dimension)) {\n    return 'date';\n  }\n  if (isDimensionTypeInterval(dimension)) {\n    return 'interval';\n  }\n  return 'num';\n}\n\n/**\n * Is numeric dimension type\n * @private\n * @param {string} dimensionType\n * @returns {boolean}\n */\nfunction isNumericDimensionType(dimensionType) {\n  const numericDimensionTypes = [\n    'timestamp',\n    'interval',\n    'time',\n    'date',\n    'num',\n  ];\n  dimensionType = dimensionType || '';\n  return numericDimensionTypes.indexOf(dimensionType.toLowerCase()) > -1;\n}\n\n/**\n * Is field numeric\n * @private\n * @param {QAE.NxField} field\n * @returns {boolean}\n */\nfunction storeNumeric(field) {\n  if (field.type === 'measure') {\n    return true;\n  }\n  if (\n    field.type === 'dimension' && isNumericDimensionType(field.dimensionType)\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Check if field is a dual value\n * @private\n * @param {Field} field\n * @returns {boolean}\n */\nexport function checkIfFieldIsDual(field) {\n  return field.type === 'dimension' && field.dimensionType === 'num';\n}\n\n/**\n * Has cell a dual value\n * @private\n * @param {QAE.NxCell} cell\n * @param {Field} field\n * @returns {boolean}\n */\nexport function isCellDual(cell, field) {\n  return checkIfFieldIsDual(field) && cell.qText !== Number(cell.qNum).toString();\n}\n\n/**\n * Escape string containing delimiter\n * @private\n * @param {string} string\n * @param {string} delimiter\n * @returns {string}\n */\nfunction escapeStringContainingDelimiter(string, delimiter) {\n  if (string.indexOf(delimiter) > -1 || string.indexOf('\\n') > -1) {\n    return `'${string.replace(/'/g, \"''\").replace(/\\n/g, ' ')}'`;\n  }\n  return string;\n}\n\n/**\n * Get the numeric from cell value\n * @private\n * @param {QAE.NxCell} cell\n * @returns {number}\n */\nfunction getNumericCellValue(cell) {\n  return cell.qNum;\n}\n\n/**\n * Get the text from a cell value\n * @private\n * @param {QAE.NxCell} cell\n * @returns {string}\n */\nfunction getTextCellValue(cell) {\n  return escapeStringContainingDelimiter(cell.qText, DEFAULT_DELIMITER);\n}\n\n/**\n * Get the value of a cell\n * @private\n * @param {QAE.NxCell} cell\n * @param {Field} field\n * @returns {(string|number)}\n */\nexport function getCellValue(cell, field) {\n  if (storeNumeric(field)) {\n    return getNumericCellValue(cell);\n  }\n  return getTextCellValue(cell);\n}\n\n/**\n * Get dual data row\n * @private\n * @param {QAE.NxCell} cell\n * @returns {string}\n */\nexport function getDualDataRow(cell) {\n  return `${cell.qNum}${DEFAULT_DELIMITER}${escapeStringContainingDelimiter(cell.qText, DEFAULT_DELIMITER)}`;\n}\n\n/**\n * Get dual headers from a field\n * @private\n * @param {Field} field\n * @returns {string}\n */\nexport function getDualHeadersForField(field) {\n  return `${field.name}${DEFAULT_DELIMITER}${field.name}_qText}`;\n}\n","import Table from './table';\nimport { validFieldType } from './utils/utils';\nimport * as HyperCubeUtils from './utils/hyper-cube-utils';\n\nclass HyperCube {\n  /**\n   * Hypercube representation\n   * @public\n   * @class\n   * @param {object} hyperCubeLayout - The QIX representation of a hypercube\n   * @param {object} options - Hypercube options\n   * @param {string} name - Name\n   * @param {string} section - Section to add hypercube data to\n   * @constructor\n   */\n  constructor(hyperCubeLayout, options) {\n    this.items = [];\n    this.fields = [];\n    this.hyperCubeLayout = this.validateHyperCubeLayout(hyperCubeLayout);\n\n    options = options || {};\n\n    if (typeof options === 'string') {\n      this.name = options;\n      options = {};\n    } else {\n      this.name = options.name;\n      if (options.section) {\n        this.section = options.section;\n      }\n    }\n\n    this.parseHyperCubeLayout(options);\n\n    this.options = options;\n  }\n\n  /**\n   * Validate the hypercube layout\n   * @private\n   * @param {object} hyperCubeLayout\n   * @returns {object} hyperCubeLayout\n   */\n  validateHyperCubeLayout(hyperCubeLayout) {\n    if (!hyperCubeLayout) { throw new Error('Hyper cube layout is undefined'); }\n    if (!hyperCubeLayout.qDimensionInfo) { throw new Error('qDimensionInfo is undefined'); }\n    if (!hyperCubeLayout.qMeasureInfo) { throw new Error('qMeasureInfo is undefined'); }\n    if (hyperCubeLayout.qMode === 'P') { throw new Error('Cannot add hyper cube in pivot mode, qMode:P(DATA_MODE_PIVOT) is not supported'); }\n    if (hyperCubeLayout.qMode === 'K') { throw new Error('Cannot add hyper cube in stacked mode, qMode:K(DATA_MODE_PIVOT_STACK) is not supported'); }\n    if (hyperCubeLayout.qMode === 'S') {\n      this.validateDataPages(hyperCubeLayout.qDataPages);\n      this.validateDataPagesCoverage(hyperCubeLayout.qDataPages, hyperCubeLayout);\n      return hyperCubeLayout;\n    }\n    throw new Error('HyperCubeLayout is not valid');\n  }\n\n  /**\n   * Validates the datapages of the hypercube\n   * @private\n   * @param {object} dataPages\n   */\n  validateDataPages(dataPages) {\n    if (!dataPages) {\n      throw new Error('qDataPages are undefined');\n    }\n\n    if (dataPages[0].qArea && dataPages[0].qArea.qTop > 0) {\n      throw new Error('qDataPages first page should start at qTop: 0.');\n    }\n  }\n\n  /**\n   * Validates that all datapages in the hypercube is covered\n   * @private\n   * @param {object[]} dataPages\n   * @param {object} hyperCubeLayout\n   */\n  validateDataPagesCoverage(dataPages, hyperCubeLayout) {\n    let qHeight = 0;\n\n    dataPages.forEach((dataPage) => {\n      this.validateQMatrix(dataPage);\n      this.validateQArea(dataPage, hyperCubeLayout, qHeight);\n      qHeight += dataPage.qArea.qHeight;\n    }, this);\n\n    if (hyperCubeLayout.qSize.qcy !== qHeight) {\n      throw new Error('qDataPages are missing pages.');\n    }\n  }\n\n  /**\n   * Validates the QMatrix in the datapage\n   * @private\n   * @param {object} dataPage\n   */\n  validateQMatrix(dataPage) {\n    if (!dataPage.qMatrix) {\n      throw new Error('qMatrix of qDataPages are undefined');\n    }\n    if (dataPage.qMatrix.length === 0) {\n      throw new Error('qDataPages are empty');\n    }\n  }\n\n  /**\n   * Validates the QArea in the datapage\n   * @private\n   * @param {object} dataPage\n   * @param {object} hyperCubeLayout\n   * @param {number} qHeight\n   */\n  validateQArea(dataPage, hyperCubeLayout, qHeight) {\n    if (!dataPage.qArea) {\n      throw new Error('qArea of qDataPages are undefined');\n    }\n    if (dataPage.qArea.qLeft > 0) {\n      throw new Error('qDataPages have data pages that\\'s not of full qWidth.');\n    }\n    if (dataPage.qArea.qWidth < hyperCubeLayout.qSize.qcx) {\n      throw new Error('qDataPages have data pages that\\'s not of full qWidth.');\n    }\n    if (dataPage.qArea.qTop < qHeight) {\n      throw new Error('qDataPages have overlapping data pages.');\n    }\n    if (dataPage.qArea.qTop > qHeight) {\n      throw new Error('qDataPages are missing pages.');\n    }\n  }\n\n  /**\n   * Parses the hypercube an extracts the data\n   * @private\n   */\n  parseHyperCubeLayout() {\n    const that = this;\n    that.fields = that.getFieldsFromHyperCubeLayout();\n    that.data = that.getDataFromHyperCubeLayout();\n    const inlineData = `${that.fields\n      .map(field => field.name)\n      .join(',')}\\n${this.data}`;\n    let hasDual = false;\n    that.fields.forEach((field) => {\n      if (field.isDual) {\n        hasDual = true;\n        that.items.push(that.getMapTableForDualField(field));\n      }\n    });\n    const options = {\n      name: that.name,\n      fields: that.getFieldsDefinition(that.fields),\n    };\n    if (that.section && !hasDual) {\n      options.section = that.section;\n    }\n    that.items.push(new Table(inlineData, options));\n  }\n\n  /**\n   * Get the Fields definition\n   * @private\n   * @param {object[]} fields\n   * @returns {object[]} fields\n   */\n  getFieldsDefinition(fields) {\n    return fields.map((field) => {\n      const mappedField = { name: field.name };\n      if (validFieldType(field.dimensionType)) {\n        mappedField.type = field.dimensionType;\n        mappedField.displayFormat = field.displayFormat;\n      }\n      if (field.isDual) {\n        mappedField.expr = `Dual(ApplyMap('MapDual__${field.name}', \"${field.name}\"), \"${field.name}\")`;\n      } else {\n        mappedField.src = field.name;\n      }\n      return mappedField;\n    });\n  }\n\n  /**\n   * Return qmatrix with dual fields\n   * @private\n   * @param {object} qMatrix\n   * @param {object} field\n   * @returns {object} field\n   */\n  mapDualFieldQMatrix(qMatrix, field) {\n    function uniqueFilter(value, index, self) {\n      return self.indexOf(value) === index;\n    }\n    return qMatrix\n      .map(row => HyperCubeUtils.getDualDataRow(row[field.index]))\n      .filter(uniqueFilter);\n  }\n\n  /**\n   * Get table with dual fields\n   * @private\n   * @param {object} field\n   * @returns {object} Table\n   */\n  getMapTableForDualField(field) {\n    const that = this;\n    const concatQMatrix = that.hyperCubeLayout.qDataPages.reduce(\n      (prev, curr) => [...prev, ...curr.qMatrix],\n      [],\n    );\n    const data = that.mapDualFieldQMatrix(concatQMatrix, field);\n    const headers = HyperCubeUtils.getDualHeadersForField(field);\n    const inlineData = `${headers}\\n${data.join('\\n')}`;\n    const name = `MapDual__${field.name}`;\n    const options = { name, prefix: 'Mapping' };\n    if (this.section && this.items.length === 0) {\n      options.section = this.section;\n    }\n    return new Table(inlineData, options);\n  }\n\n  /**\n   * Extracts the data from the hypercube layout as a csv representation\n   * @private\n   * @returns {string}\n   */\n  getDataFromHyperCubeLayout() {\n    const that = this;\n    const data = that.hyperCubeLayout.qDataPages\n      .map(dataPage => dataPage.qMatrix\n        .map(row => row\n          .map((cell, index) => {\n            const field = that.fields[index];\n            if (!field.isDual && HyperCubeUtils.isCellDual(cell, field)) {\n              field.isDual = true;\n            }\n            return HyperCubeUtils.getCellValue(cell, field);\n          })\n          .join(','))\n        .join('\\n'))\n      .join('\\n');\n    return data;\n  }\n\n  /**\n   * Get the fields from the hypercube\n   * @private\n   * @returns {Array<{type: string, dimensionType: string, name: string, displayFormat: string, index: number}>} - An array of dimension and measures\n   */\n  getFieldsFromHyperCubeLayout() {\n    const that = this;\n    const fields = [];\n    for (let i = 0; i < that.hyperCubeLayout.qDimensionInfo.length; i += 1) {\n      fields.push({\n        type: 'dimension',\n        dimensionType: HyperCubeUtils.getDimensionType(that.hyperCubeLayout.qDimensionInfo[i]),\n        name: that.hyperCubeLayout.qDimensionInfo[i].qFallbackTitle,\n        displayFormat: that.hyperCubeLayout.qDimensionInfo[i].qNumFormat.qFmt,\n        index: i,\n      });\n    }\n    for (let j = 0; j < that.hyperCubeLayout.qMeasureInfo.length; j += 1) {\n      fields.push({\n        type: 'measure',\n        name: that.hyperCubeLayout.qMeasureInfo[j].qFallbackTitle,\n        index: that.hyperCubeLayout.qDimensionInfo.length + j,\n      });\n    }\n    return fields;\n  }\n\n  /**\n   * Get tables from the hypercube\n   * @public\n   * @returns {object[]} Tables\n   */\n  getItems() {\n    return this.items;\n  }\n}\n\nexport default HyperCube;\n","class SetStatement {\n  /**\n   * Define set statements\n   * @class\n   * @public\n   * @param {object} defaultSetStatements - A representation where each property name will be used as key and the property will be the value\n   * @constructor\n   */\n  constructor(defaultSetStatements) {\n    this.defaultSetStatements = defaultSetStatements;\n  }\n\n  /**\n   * Get the entire set statement as script\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    return Object.keys(this.defaultSetStatements)\n      .map(key => `SET ${key}='${Array.isArray(this.defaultSetStatements[key])\n        ? this.defaultSetStatements[key].join(';') : this.defaultSetStatements[key]}';`)\n      .join('\\n');\n  }\n\n  /**\n   * Always returns the name as empty\n   * @public\n   * @returns {string}\n   */\n  getName() {\n    return '';\n  }\n}\n\nexport default SetStatement;\n","import { getFieldName, escapeText } from './utils/utils';\n\nclass DerivedFieldsTemplate {\n  /**\n   * Declare fields that can be derived from a template. An example can be a calendar template.\n   * @public\n   * @param {object} options - Derived Field Template definition.\n   * @param {callback} options.fieldMatchFunction - Matching function that will apply a field template definition.\n   * @param {string} options.name - Name of derived field.\n   * @param {string} options.fieldTag - What field tag that will be used in the derived field.\n   * @param {string} options.derivedFieldDefinition - What script definition should be used in the derived field.\n   * @constructor\n   */\n  constructor(options) {\n    this.getFieldFn = options.fieldMatchFunction;\n    this.name = options.name;\n    this.fieldTag = options.fieldTag;\n    this.derivedFieldDefinition = options.derivedFieldDefinition;\n  }\n\n  /**\n   * Returns the script\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    const fields = this.getFieldFn() || [];\n\n    if (fields.length > 0) {\n      return this.getDefinition(fields.map(getFieldName));\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Get the script definition for a set of specific fields\n   * @public\n   * @param {string[]} fieldNames - An array of strings with field names.\n   * @returns {string}\n   */\n  getDefinition(fieldNames) {\n    return `\"${escapeText(this.name)}\":\nDECLARE FIELD DEFINITION Tagged ('$${this.fieldTag}')\nFIELDS\n${this.derivedFieldDefinition}\nDERIVE FIELDS FROM FIELDS [${fieldNames.join(', ')}] USING \"${escapeText(this.name)}\";`;\n  }\n}\n\nexport default DerivedFieldsTemplate;\n","import DerivedFieldTemplate from './derived-fields-template';\n\nconst derivedFieldsDefinition = `Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),\n  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),\n  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),\n  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),\n  Month($1) AS [Month] Tagged ('$month', '$cyclic'),\n  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),\n  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),\n  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),\n  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),\n  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),\n  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,\nYear(Today())-Year($1) AS [YearsAgo] ,\n  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,\n4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,\nCeil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,\n  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,\n12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,\nMonth(Today())-Month($1) AS [MonthRelNo] ,\n  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,\n(WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,\nWeek(Today())-Week($1) AS [WeekRelNo];`;\n\n/**\n * A field matching callback to identify which fields that are associated with a specific calendarTemplate.\n * @callback fieldMatchingCalendarCallback\n * @param {string} calendarTemplate\n * @param {Field} field\n */\n\n/**\n * Get the derived field definition for a field that matches the pattern\n * @public\n * @param {fieldMatchingCalendarCallback} fn - Field matcher function\n * @returns {DerivedFieldsTemplate}\n */\nfunction getCalenderDerivedFieldDefinition(fn) {\n  return new DerivedFieldTemplate({\n    name: 'autoCalendar',\n    fieldTag: 'date',\n    derivedFieldDefinition: derivedFieldsDefinition,\n    fieldMatchFunction: () => fn(f => f.calendarTemplate),\n  });\n}\n\nexport default getCalenderDerivedFieldDefinition;\n","import Table from './table';\nimport HyperCube from './hyper-cube';\nimport Connections from './connections';\nimport SetStatement from './set-statement';\n\nimport * as Utils from './utils/utils';\nimport getDerivedFieldDefinition from './calendar-derived-fields';\n\nconst SCRIPT_BLOCK_SPACING = '\\n\\n';\n\nclass Halyard {\n  /**\n   * Representation of tables or hypercubes to load\n   * @class\n   * @public\n   * @constructor\n   */\n  constructor() {\n    this.defaultSetStatements = {};\n    this.items = [];\n    this.addItem(new SetStatement(this.defaultSetStatements));\n    this.lastItems = [getDerivedFieldDefinition(x => this.getFields(x))];\n  }\n\n  /**\n   * Get connections object that are used in the model\n   * @public\n   * @returns {Connection[]}\n   */\n  getConnections() {\n    return this.items.filter(item => item.getConnection).map(item => item.getConnection());\n  }\n\n  /**\n   * Get the QIX connections definitions that are used in the model\n   * @public\n   * @returns {{qName: (string), qConnectionString: (string), qType: (string)}\n   */\n  getQixConnections() {\n    return this.getConnections().map(connection => connection.getQixConnectionObject())\n      .filter(connection => connection);\n  }\n\n  /**\n   * Field matching callback to identify if a field matches another\n   * @callback fieldMatchingCallback\n   * @param {Field} field\n   * @returns {boolean}\n   */\n\n  /**\n   * Get fields that matches pattern sent in as params\n   * @public\n   * @param {fieldMatchingCallback} matcherFn\n   * @returns {Field[]}\n   */\n  getFields(matcherFn) {\n    matcherFn = matcherFn || (() => true);\n\n    const fields = [];\n\n    this.items.forEach((item) => {\n      if (item.getFields && item.getFields()) {\n        fields.push(...item.getFields().filter(matcherFn));\n      }\n    });\n\n    return fields;\n  }\n\n  /**\n   * Configure the default set statements like time, date, currency formats\n   * @public\n   * @param {SetStatement} defaultSetStatements\n   * @param {boolean} preservePreviouslyEnteredValues\n   */\n  setDefaultSetStatements(defaultSetStatements, preservePreviouslyEnteredValues) {\n    const that = this;\n\n    Object.keys(defaultSetStatements).forEach((key) => {\n      if (!(preservePreviouslyEnteredValues && that.defaultSetStatements[key])) {\n        that.defaultSetStatements[key] = defaultSetStatements[key];\n      }\n    });\n  }\n\n  /**\n   * Get the script for a item (table, preceeding load)\n   * @public\n   * @param {(Table|HyperCube)} item\n   * @returns {string}\n   */\n  getItemScript(item) {\n    let itemScript = item.getScript();\n\n    if (item.getName && item.getName()) {\n      if (item.section) {\n        itemScript = `///$tab ${Utils.escapeText(item.section)}\\n\"${Utils.escapeText(item.getName())}\":\\n${itemScript}`;\n      } else {\n        itemScript = `\"${Utils.escapeText(item.getName())}\":\\n${itemScript}`;\n      }\n    }\n\n    return itemScript;\n  }\n\n  /**\n   * Fetch all script blocks\n   * @public\n   * @returns {string[]}\n   */\n  getAllScriptBlocks() {\n    return this.items.concat(this.lastItems).filter(item => item.getScript());\n  }\n\n  /**\n   * Fetches the entire script\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    return this.getAllScriptBlocks().map(item => this.getItemScript(item))\n      .join(SCRIPT_BLOCK_SPACING);\n  }\n\n  /**\n   * Add hyper cube explicit or implicitly\n   * @public\n   * @param {HyperCube} arg1 - Hypercube\n   * @param {object} options - Hypercube options\n   * @param {string} options.name - Name\n   * @param {string} options.section - Section to add hypercube data to\n   * @returns {object} Hypercube\n   */\n  addHyperCube(arg1, options) {\n    let newHyperCube;\n\n    if (arg1 instanceof HyperCube) {\n      newHyperCube = arg1;\n    } else {\n      newHyperCube = new HyperCube(arg1, options);\n    }\n\n    for (let i = 0; i < newHyperCube.items.length; i += 1) {\n      this.checkIfItemNameExists(newHyperCube.items[i]);\n    }\n\n    for (let i = 0; i < newHyperCube.items.length; i += 1) {\n      this.addItem(newHyperCube.items[i]);\n    }\n\n    return newHyperCube;\n  }\n\n  /**\n   * Support to add table explicit or implicitly\n   * @public\n   * @param {Table} arg1 - Table\n   * @param {object} options\n   * @param {string} options.name - Table name\n   * @param {Field[]} options.fields - Array of field objects\n   * @param {string} options.prefix - Add prefix before the table\n   * @param {string} options.section - Section to add table to\n   * @returns {object} Table\n   */\n  addTable(arg1, options) {\n    let newTable;\n\n    if (arg1 instanceof Table) {\n      newTable = arg1;\n    } else {\n      newTable = new Table(arg1, options);\n    }\n\n    return this.addItem(newTable);\n  }\n\n  /**\n   * Verify that item doesn't exist in model\n   * @public\n   * @param {(Table|HyperCube)} newItem - Table or Hypercube\n   */\n  checkIfItemNameExists(newItem) {\n    if (newItem.getName && newItem.getName()) {\n      if (this.items.filter(item => item.getName() === newItem.getName()).length > 0) {\n        throw new Error('Cannot add another table with the same name.');\n      }\n    }\n  }\n\n  /**\n   * Add new item to the model\n   * @public\n   * @param {(Table|HyperCube)} newItem - Table or Hypercube\n   * @returns {(Table|HyperCube)} - Table or Hypercube\n   */\n  addItem(newItem) {\n    this.checkIfItemNameExists(newItem);\n\n    this.items.push(newItem);\n\n    return newItem;\n  }\n\n  /**\n   * Locate which item that generated a script at the specified character position\n   * @public\n   * @param {number} charPosition\n   * @returns {(Table|HyperCube)} - Table or Hypercube\n   */\n  getItemThatGeneratedScriptAt(charPosition) {\n    const allScriptBlocks = this.getAllScriptBlocks();\n    let scriptBlockStartPosition = 0;\n\n    for (let i = 0; i < allScriptBlocks.length; i += 1) {\n      const itemScript = this.getItemScript(allScriptBlocks[i]);\n      const scriptBlockEndPosition = scriptBlockStartPosition\n          + (`${itemScript}${SCRIPT_BLOCK_SPACING}`).length;\n\n      if (scriptBlockStartPosition <= charPosition && charPosition <= scriptBlockEndPosition) {\n        return allScriptBlocks[i];\n      }\n\n      scriptBlockStartPosition = scriptBlockEndPosition;\n    }\n\n    return undefined;\n  }\n}\n\nHalyard.Table = Table;\n\nHalyard.HyperCube = HyperCube;\n\nHalyard.Connections = Connections;\n\nexport default Halyard;\n\nif (typeof module !== 'undefined') {\n  module.exports = Halyard;\n}\n"],"names":["folderPath","path","folderPathMatch","match","fileName","fileNameMatch","fileExtension","fileExtensionMatch","escapeText","text","replace","uniqueName","c","r","Math","random","v","toString","validFieldType","type","validFieldTypes","indexOf","toLowerCase","indentation","getFieldName","field","name","src","ConnectionBase","connectionType","qName","getName","qConnectionString","qType","getConnectionType","getLibStatement","FileConnection","Utils","WebFileConnection","url","InlineData","data","File","Web","WebConnection","Inline","escapeValueContainingDelimiter","delimiter","convert","Array","csv","headers","Object","keys","map","header","join","fields","i","length","j","push","slice","isJson","ConnectionLookup","connectionsRegistry","matchingFn","connection","connectionMatcher","ConnectionMatcher","addConnection","Connections","JsonToCsv","supportedCharacterSet","characterSet","validCharacterSets","Number","formatSpecification","options","formatSpecificationArr","fileFormat","headerRowNr","srcTable","noLabels","formatSpecificationString","Table","defaultConnectionMatcher","findMatch","prefix","section","formattedInput","format","toUpperCase","inputFormat","displayFormat","expr","Error","JSON","stringify","isProceedingLoad","getPrefix","getFieldList","getScript","getFileExtension","qTypes","timestamp","date","time","interval","qDimensionType","numeric","DEFAULT_DELIMITER","isDimensionTypeMixed","dimension","hyperCubeSpecification","qTags","isDimensionTypeText","isDimensionTypeTimestamp","qNumFormat","isDimensionTypeDate","isDimensionTypeTime","isDimensionTypeInterval","getDimensionType","isNumericDimensionType","dimensionType","numericDimensionTypes","storeNumeric","checkIfFieldIsDual","isCellDual","cell","qText","qNum","escapeStringContainingDelimiter","string","getNumericCellValue","getTextCellValue","getCellValue","getDualDataRow","getDualHeadersForField","HyperCube","hyperCubeLayout","items","validateHyperCubeLayout","parseHyperCubeLayout","qDimensionInfo","qMeasureInfo","qMode","validateDataPages","qDataPages","validateDataPagesCoverage","dataPages","qArea","qTop","qHeight","forEach","dataPage","validateQMatrix","validateQArea","qSize","qcy","qMatrix","qLeft","qWidth","qcx","that","getFieldsFromHyperCubeLayout","getDataFromHyperCubeLayout","inlineData","hasDual","isDual","getMapTableForDualField","getFieldsDefinition","mappedField","uniqueFilter","value","index","self","row","HyperCubeUtils","filter","concatQMatrix","reduce","prev","curr","mapDualFieldQMatrix","qFallbackTitle","qFmt","SetStatement","defaultSetStatements","key","isArray","DerivedFieldsTemplate","getFieldFn","fieldMatchFunction","fieldTag","derivedFieldDefinition","getDefinition","undefined","fieldNames","derivedFieldsDefinition","getCalenderDerivedFieldDefinition","fn","DerivedFieldTemplate","f","calendarTemplate","SCRIPT_BLOCK_SPACING","Halyard","addItem","lastItems","getDerivedFieldDefinition","x","getFields","item","getConnection","getConnections","getQixConnectionObject","matcherFn","preservePreviouslyEnteredValues","itemScript","concat","getAllScriptBlocks","getItemScript","arg1","newHyperCube","checkIfItemNameExists","newTable","newItem","charPosition","allScriptBlocks","scriptBlockStartPosition","scriptBlockEndPosition","module","exports"],"mappings":"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"}