{"version":3,"file":"halyard-enigma-mixin.js","sources":["../src/enigma-mixin/utils.js","../src/enigma-mixin/halyard-enigma-mixin.js"],"sourcesContent":["/**\n * @public\n * @param {{qThousandSep: string, qDecimalSep: string, qMoneyThousandSep: string, qMoneyDecimalSep: string, qMoneyFmt: string,\n * qTimeFmt: string, qDateFmt: string, qTimestampFmt: string, qFirstWeekDay: string, qReferenceDay: string,\n * qFirstMonthOfYear: string, qCollation: string, qMonthNames: string,\n * qLongMonthNames: string, qDayNames: string, qLongDayNames: string }} localInfoData\n * @returns {{ThousandSep: string, DecimalSep: string, MoneyThousandSep: string, MoneyDecimalSep: string,\n * MoneyFormat: string, TimeFormat: string, DateFormat: string, TimestampFormat: string, FirstWeekDay: string,\n * ReferenceDay: string, FirstMonthOfYear: string, CollationLocale: string, MonthNames: string, LongMonthNames: string,\n * DayNames: string, LongDayNames: string}}\n */\nexport default function convertQixGetLocalInfo(localInfoData) {\n  return {\n    ThousandSep: localInfoData.qThousandSep,\n    DecimalSep: localInfoData.qDecimalSep,\n    MoneyThousandSep: localInfoData.qMoneyThousandSep,\n    MoneyDecimalSep: localInfoData.qMoneyDecimalSep,\n    MoneyFormat: localInfoData.qMoneyFmt,\n    TimeFormat: localInfoData.qTimeFmt,\n    DateFormat: localInfoData.qDateFmt,\n    TimestampFormat: localInfoData.qTimestampFmt,\n    FirstWeekDay: localInfoData.qFirstWeekDay,\n    ReferenceDay: localInfoData.qReferenceDay,\n    FirstMonthOfYear: localInfoData.qFirstMonthOfYear,\n    CollationLocale: localInfoData.qCollation,\n    MonthNames: localInfoData.qCalendarStrings.qMonthNames,\n    LongMonthNames: localInfoData.qCalendarStrings.qLongMonthNames,\n    DayNames: localInfoData.qCalendarStrings.qDayNames,\n    LongDayNames: localInfoData.qCalendarStrings.qLongDayNames,\n  };\n}\n","import convertQixGetLocalInfo from './utils';\n\nconst CONNECTION_ERROR = 'Connection Error';\nconst LOADING_ERROR = 'Loading Error';\nconst SYNTAX_ERROR = 'Syntax Error';\n/**\n * Create error message\n * @private\n * @param {string} errorType\n * @param {object} qixError\n * @param {(Table|HyperCube)} item\n * @returns {{type: string, message: string, item: object, qixError: string}}\n */\nfunction createErrorMessage(errorType, qixError, item) {\n  return {\n    type: errorType,\n    message: qixError.message || qixError.qErrorString,\n    item,\n    qixError,\n  };\n}\n\nconst halyardMixin = {\n  types: 'Global',\n  init(args) {\n    if (args.config) {\n      args.api.Promise = args.config.Promise;\n    } else {\n      args.api.Promise = args.Promise;\n    }\n  },\n  extend: {\n    /**\n     * Creates a session app based on the model in the halyard instance\n     * @public\n     * @param {Halyard} halyard - A halyard instance\n     * @returns {Promise.<TResult>}\n     */\n    createSessionAppUsingHalyard(halyard) {\n      const that = this;\n      return that.createSessionApp().then(app => that.setScriptAndReloadWithHalyard(app, halyard, false));\n    },\n\n    /**\n     * Creates an app with the model in the halyard instance.\n     * @public\n     * @param {string} appName\n     * @param {Halyard} halyard\n     * @returns {Promise.<TResult>}\n     */\n    createAppUsingHalyard(appName, halyard) {\n      const that = this;\n      return that.createApp(appName).then((app) => {\n        const appId = app.qAppId;\n        return that.openDoc(appId).then(result => that.setScriptAndReloadWithHalyard(result, halyard, true));\n      });\n    },\n\n    /**\n     * Reloads an existing app with the model in the halyard instance. Can also create an app is createIfMissing is set to true.\n     * @public\n     * @param {string} existingAppName\n     * @param {Halyard} halyard\n     * @param {boolean} createIfMissing\n     * @returns {Promise.<TResult>}\n     */\n    reloadAppUsingHalyard(existingAppName, halyard, createIfMissing) {\n      const that = this;\n      return that.openDoc(existingAppName)\n        .catch((error) => {\n          const COULD_NOT_FIND_APP = 1003;\n\n          if (createIfMissing && error.code === COULD_NOT_FIND_APP) {\n            return that.createApp(existingAppName).then(app => that.openDoc(app.qAppId));\n          }\n          return that.Promise.reject(error);\n        })\n        .then(result => that.setScriptAndReloadWithHalyard(result, halyard, true));\n    },\n\n    /**\n     * Use the model in halyard to set the script of an app and save it\n     * @public\n     * @param {object} app\n     * @param {Halyard} halyard\n     * @param {boolean} doSaveAfterReload\n     * @returns {Promise.<TResult>}\n     */\n    setScriptAndReloadWithHalyard(app, halyard, doSaveAfterReload) {\n      const that = this;\n      const deferredConnections = [];\n\n      halyard.getConnections().forEach((connection) => {\n        const qixConnectionObject = connection.getQixConnectionObject();\n        if (qixConnectionObject) {\n          const connectionPromise = app.createConnection(qixConnectionObject)\n            .then(result => result, (err) => {\n              const LOCERR_CONNECTION_ALREADY_EXISTS = 2000;\n\n              // Will not throw error if connection already exists.\n              // The connections guid makes the connections unique and we assumes that it\n              // is the same that was previously created\n              if (!(err.code && err.code === LOCERR_CONNECTION_ALREADY_EXISTS)) {\n                throw createErrorMessage(CONNECTION_ERROR, err, connection);\n              }\n            });\n\n          deferredConnections.push(connectionPromise);\n        }\n      });\n\n      return that.Promise.all(deferredConnections).then(() => app.getLocaleInfo().then((localeInfoResult) => {\n        halyard.setDefaultSetStatements(convertQixGetLocalInfo(localeInfoResult), true);\n        return app.globalApi.configureReload(true, true, false).then(() => app.setScript(halyard.getScript())\n          .then(() => app.doReload().then(() => app.globalApi.getProgress(0).then((progressResult) => {\n            if (progressResult.qErrorData.length !== 0) {\n              return app.checkScriptSyntax().then((syntaxCheckData) => {\n                if (syntaxCheckData.length === 0) {\n                  throw createErrorMessage(LOADING_ERROR, progressResult.qErrorData[0]);\n                } else {\n                  const item = halyard.getItemThatGeneratedScriptAt(syntaxCheckData[0].qTextPos);\n                  throw createErrorMessage(SYNTAX_ERROR, progressResult.qErrorData[0], item);\n                }\n              });\n            }\n\n            if (doSaveAfterReload) {\n              return app.doSave().then(() => app);\n            }\n\n            return app;\n          }))));\n      }));\n    },\n  },\n};\n\n\nconst exposeGlobalApi = {\n  types: 'Doc',\n  init(args) {\n    const getObjectArgs = {\n      handle: -1,\n      id: 'Global',\n      type: 'Global',\n    };\n    if (args.config) {\n      getObjectArgs.genericType = 'Global';\n    } else {\n      getObjectArgs.customType = 'Global';\n      getObjectArgs.delta = true;\n    }\n    args.api.globalApi = args.api.session.getObjectApi(getObjectArgs);\n  },\n};\n\nmodule.exports = [halyardMixin, exposeGlobalApi];\n"],"names":["convertQixGetLocalInfo","localInfoData","ThousandSep","qThousandSep","DecimalSep","qDecimalSep","MoneyThousandSep","qMoneyThousandSep","MoneyDecimalSep","qMoneyDecimalSep","MoneyFormat","qMoneyFmt","TimeFormat","qTimeFmt","DateFormat","qDateFmt","TimestampFormat","qTimestampFmt","FirstWeekDay","qFirstWeekDay","ReferenceDay","qReferenceDay","FirstMonthOfYear","qFirstMonthOfYear","CollationLocale","qCollation","MonthNames","qCalendarStrings","qMonthNames","LongMonthNames","qLongMonthNames","DayNames","qDayNames","LongDayNames","qLongDayNames","CONNECTION_ERROR","LOADING_ERROR","SYNTAX_ERROR","createErrorMessage","errorType","qixError","item","type","message","qErrorString","halyardMixin","types","init","args","config","api","Promise","extend","createSessionAppUsingHalyard","halyard","that","createSessionApp","then","app","setScriptAndReloadWithHalyard","createAppUsingHalyard","appName","createApp","appId","qAppId","openDoc","result","reloadAppUsingHalyard","existingAppName","createIfMissing","catch","error","COULD_NOT_FIND_APP","code","reject","doSaveAfterReload","deferredConnections","getConnections","forEach","connection","qixConnectionObject","getQixConnectionObject","connectionPromise","createConnection","err","LOCERR_CONNECTION_ALREADY_EXISTS","push","all","getLocaleInfo","localeInfoResult","setDefaultSetStatements","globalApi","configureReload","setScript","getScript","doReload","getProgress","progressResult","qErrorData","length","checkScriptSyntax","syntaxCheckData","getItemThatGeneratedScriptAt","qTextPos","doSave","exposeGlobalApi","getObjectArgs","handle","id","genericType","customType","delta","session","getObjectApi","module","exports"],"mappings":"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"}