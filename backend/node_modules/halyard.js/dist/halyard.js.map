{"version":3,"file":"halyard.js","sources":["../src/utils/utils.js","../src/connections/connection-base.js","../src/connections/file.js","../src/connections/web-file.js","../src/connections/inline-data.js","../src/connections.js","../src/utils/json-to-csv.js","../src/connection-matcher.js","../src/default-connection-matcher.js","../src/utils/format-specification.js","../src/table.js","../src/utils/hyper-cube-specification.js","../src/utils/hyper-cube-utils.js","../src/hyper-cube.js","../src/set-statement.js","../src/derived-fields-template.js","../src/calendar-derived-fields.js","../src/halyard.js"],"sourcesContent":["/**\n * Get folder path from file path\n * @private\n * @param {string} path\n * @returns {string}\n */\nexport function folderPath(path) {\n  let folderPathMatch = path.match(/^(.*)(\\\\.*\\..*$|\\\\.*)$/);\n\n  if (folderPathMatch) {\n    return folderPathMatch[1];\n  }\n\n  // Unix file path check\n  folderPathMatch = path.match(/^(.*)(\\/.*\\..*$|\\/.*)$/);\n\n  return folderPathMatch && folderPathMatch[1];\n}\n\n/**\n * Get file name from file path\n * @private\n * @param {string} path\n * @returns {string}\n */\nexport function fileName(path) {\n  let fileNameMatch = path.match(/^.*\\\\(.*\\..*|.*)$/);\n\n  if (fileNameMatch) {\n    return fileNameMatch[1];\n  }\n\n  fileNameMatch = path.match(/^.*\\/(.*\\..*|.*)$/);\n\n  return fileNameMatch && fileNameMatch[1];\n}\n\n/**\n * Get file extension from file path\n * @private\n * @param {string} path\n * @returns {string}\n */\nexport function fileExtension(path) {\n  const fileExtensionMatch = path.match(/^.*\\.(.*)$/);\n\n  return fileExtensionMatch && fileExtensionMatch[1];\n}\n\n/**\n * Escape text with double quotes\n * @private\n * @param {string} text\n * @returns {string}\n */\nexport function escapeText(text) {\n  return text.replace(/\"/g, '\"\"');\n}\n\n/**\n * Get a unique name\n * @private\n * @returns {string}\n */\nexport function uniqueName() {\n  /* eslint no-bitwise: [\"off\"] */\n  /* eslint no-mixed-operators: [\"off\"] */\n\n  return 'xxxxx-8xxxx-yxxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\n/**\n * Validate the field type\n * @private\n * @param {string} type\n * @returns {boolean}\n */\nexport function validFieldType(type) {\n  const validFieldTypes = ['time', 'timestamp', 'date', 'interval'];\n\n  type = type || '';\n\n  return validFieldTypes.indexOf(type.toLowerCase()) > -1;\n}\n\n/**\n * Get indentation characters\n * @private\n * @returns {string}\n */\nexport function indentation() {\n  return '  ';\n}\n\n/**\n * Get the field name\n * @private\n * @param {Field} field\n * @returns {string}\n */\nexport function getFieldName(field) {\n  return field.name || field.src;\n}\n","import { uniqueName } from '../utils/utils';\n\n/**\n * A base set of methods used by Connections\n * @typedef {object} Connection\n * @property {string} path - The Path to a resource\n * @property {string} connectionType - The type can be either 'folder' or 'internet'\n */\n\nclass ConnectionBase {\n  /**\n   * A base set of methods used by Connections\n   * @public\n   * @param {string} path - The Path to a resource\n   * @param {string} connectionType - The type can be either 'folder' or 'internet'\n   * @class\n   */\n  constructor(path, connectionType) {\n    this.path = path;\n    this.connectionType = connectionType;\n    this.fileExtension = '';\n  }\n\n  /**\n   * Returns specified file extension.\n   * @public\n   * @returns {string}\n   */\n  getFileExtension() {\n    return this.fileExtension;\n  }\n\n  /**\n   * Get specified connection type.\n   * @public\n   * @returns {string}\n   */\n  getConnectionType() {\n    return this.connectionType;\n  }\n\n  /**\n   * Get the QIX representation of a connection.\n   * @public\n   * @returns {{qName: (string), qConnectionString: (string), qType: (string)}}\n   */\n  getQixConnectionObject() {\n    return {\n      qName: this.getName(),\n      qConnectionString: this.path,\n      qType: this.getConnectionType(),\n    };\n  }\n\n  /**\n   * Get the name and if nothing is set then it will receive a unique name\n   * @public\n   * @returns {string}\n   */\n  getName() {\n    if (!this.name) {\n      this.name = uniqueName();\n    }\n\n    return this.name;\n  }\n\n  /**\n   * Get the lib statement used in the load script to connect to a connection\n   * @public\n   * @returns {string}\n   */\n  getLibStatement() {\n    return `lib://${this.getName()}`;\n  }\n\n  /**\n   * Get the load script for this connection\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    return `FROM [${this.getLibStatement()}]`;\n  }\n}\n\nexport default ConnectionBase;\n","import ConnectionBase from './connection-base';\nimport * as Utils from '../utils/utils';\n\nclass FileConnection extends ConnectionBase {\n  /**\n   * File Connection representation. It will create a folder connection in QIX.\n   * @public\n   * @param {string} path - Absolute file path\n   * @constructor\n   */\n  constructor(path) {\n    super(Utils.folderPath(path), 'folder');\n\n    this.fileName = Utils.fileName(path);\n\n    this.fileExtension = Utils.fileExtension(path) || 'txt';\n  }\n\n  /**\n   * Get the lib statement for the specified file path\n   * @public\n   * @returns {string}\n   */\n  getLibStatement() {\n    return `${super.getLibStatement()}/${this.fileName}`;\n  }\n}\n\nexport default FileConnection;\n","import ConnectionBase from './connection-base';\n\nclass WebFileConnection extends ConnectionBase {\n  /**\n   * Web file connector structure. It will setup everything to create a QIX internet connection.\n   * @public\n   * @param {string} url\n   * @param {string} fileExtension\n   */\n  constructor(url, fileExtension) {\n    super(url, 'internet');\n\n    const fileExtensionMatch = url.match(/^https?:\\/\\/.*\\/.*\\.(\\w*)\\?.*$/)\n      || url.match(/^https?:\\/\\/.*\\/.*\\.(\\w*)$/);\n\n    this.fileExtension = fileExtension || (fileExtensionMatch && fileExtensionMatch[1]) || 'html';\n  }\n}\nexport default WebFileConnection;\n","import ConnectionBase from './connection-base';\nimport * as Utils from '../utils/utils';\n\nclass InlineData extends ConnectionBase {\n  /**\n   * Inline data representation. This is typically CSV formatted data.\n   * @public\n   * @param {string} data\n   * @constructor\n   */\n  constructor(data) {\n    super();\n\n    this.data = data;\n\n    this.fileExtension = 'txt';\n  }\n\n  /**\n   * Get the load script representation\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    return `INLINE \"\\n${Utils.escapeText(this.data)}\\n\"`;\n  }\n\n  /**\n   * Get lib statement but there are none for inline data\n   * @private\n   */\n  getLibStatement() {\n  }\n\n  /**\n   * Get the QAE connection object but there are none for inline data\n   * @private\n   */\n  getQixConnectionObject() {\n  }\n}\n\nexport default InlineData;\n","import FileConnection from './connections/file';\nimport WebConnection from './connections/web-file';\nimport InlineData from './connections/inline-data';\n\n/**\n * Default set of Connections that are available\n * @constant\n * @type {object}\n */\nexport default {\n  File: FileConnection,\n  Web: WebConnection,\n  Inline: InlineData,\n};\n","/**\n * Escape values containing delimiter\n * @private\n * @param {string} data\n * @param {string} delimiter\n * @returns {string}\n */\nfunction escapeValueContainingDelimiter(data, delimiter) {\n  if (data && typeof data === 'string' && (data.indexOf(delimiter) > -1 || data.indexOf('\\n') > -1)) {\n    return `\"${data.replace(/\"/g, '\"\"').replace(/\\n/g, ' ')}\"`;\n  }\n\n  return data;\n}\n\n/**\n * Convert array date to a string in a csv format\n * @private\n * @param {array} data\n * @returns {string}\n */\nexport function convert(data) {\n  if (data instanceof Array === false) {\n    data = [data];\n  }\n\n  let csv = '';\n  const delimiter = ',';\n\n  const headers = Object.keys(data[0]);\n\n  csv = `${csv + headers.map(header => escapeValueContainingDelimiter(header, delimiter))\n    .join(delimiter)}\\n`;\n\n  let fields = [];\n\n  for (let i = 0; i < data.length; i += 1) {\n    fields = [];\n\n    for (let j = 0; j < headers.length; j += 1) {\n      fields.push(escapeValueContainingDelimiter(data[i][headers[j]], delimiter));\n    }\n\n    csv = `${csv + fields.join(delimiter)}\\n`;\n  }\n\n  csv = csv.slice(0, -('\\n'.length));\n\n  return csv;\n}\n\n/**\n * Validate that the data is an JSON array\n * @private\n * @param {array} data\n * @returns {boolean}\n */\nexport function isJson(data) {\n  if (data instanceof Array) {\n    if (data[0] && typeof data[0] === 'object') {\n      return true;\n    }\n  }\n\n  return false;\n}\n","class ConnectionLookup {\n  /**\n   * Utility to add a matching function and a connection type to make it easier to implicitly choose a connection\n   * @private\n   * @constructor\n   */\n  constructor() {\n    this.connectionsRegistry = [];\n  }\n\n  /**\n   * Connection matching callback to identify which connection to use for an implicitly declared source.\n   * @callback connectionMatchingCallback\n   * @param {string} data - Url, file path, csv data\n   * @returns {Connection}\n   */\n\n  /**\n   * Add a matching function with a connection instance\n   * @private\n   * @param {connectionMatchingCallback} matchingFn - Matching function to decide what connection function to invoke\n   * @param {Connection} connection - Callback that returns a Connection instance\n   */\n  addConnection(matchingFn, connection) {\n    this.connectionsRegistry.push({\n      matchingFn,\n      connection,\n    });\n  }\n\n  /**\n   * Find a match for connection based on the input data\n   * @private\n   * @param {string} data - The data can be an Url, a file path or a csv data blob\n   * @returns {object}\n   */\n  findMatch(data) {\n    for (let i = 0; i < this.connectionsRegistry.length; i += 1) {\n      if (this.connectionsRegistry[i].matchingFn(data)) {\n        return this.connectionsRegistry[i].connection(data);\n      }\n    }\n\n    return data;\n  }\n}\n\nexport default ConnectionLookup;\n","import Connections from './connections';\nimport * as JsonToCsv from './utils/json-to-csv';\nimport ConnectionMatcher from './connection-matcher';\n\nconst connectionMatcher = new ConnectionMatcher();\n\n// url to a table file\nconnectionMatcher.addConnection(data => typeof data === 'string' && data.match(/^https?:\\/\\/(.*)$/g), data => new Connections.Web(data));\n\n// Path to a table file\nconnectionMatcher.addConnection(data => typeof data === 'string' && data.match(/^.*\\.(.*)$/g), data => new Connections.File(data));\n\n// Inline JSON table to csv\nconnectionMatcher.addConnection(\n  data => data instanceof Array && JsonToCsv.isJson(data),\n  data => new Connections.Inline(JsonToCsv.convert(data)),\n);\n\n// Inline csv table\nconnectionMatcher.addConnection(data => typeof data === 'string', data => new Connections.Inline(data));\n\nexport default connectionMatcher;\n","import { escapeText } from './utils';\n\n/**\n * Validates supported character sets\n * @private\n * @param {string} characterSet\n * @returns {boolean|string}\n */\nfunction supportedCharacterSet(characterSet) {\n  const validCharacterSets = ['utf8', 'unicode', 'ansi', 'oem', 'mac'];\n\n  return (validCharacterSets.indexOf(characterSet) > -1 && characterSet)\n    || (Number(characterSet).toString() !== 'NaN' && `codepage is ${characterSet}`);\n}\n\n/**\n * Get the QIX specific format of a file\n * @private\n * @param {{ fileExtension: string, headerRowNr: number, delimiter: string, characterSet: string, srcTable: string, noLabels: boolean }} options\n * @returns {string}\n */\nexport default function formatSpecification(options) {\n  if (!options) {\n    options = {};\n  }\n\n  const formatSpecificationArr = [];\n\n  if (options.fileExtension) {\n    let fileFormat = options.fileExtension;\n\n    if (fileFormat === 'xlsx') {\n      fileFormat = 'ooxml';\n    }\n\n    if (fileFormat === 'csv') {\n      fileFormat = 'txt';\n    }\n\n    if (fileFormat === 'htm') {\n      fileFormat = 'html';\n    }\n\n    formatSpecificationArr.push(fileFormat);\n  }\n\n  if (options.headerRowNr || options.headerRowNr === 0) {\n    formatSpecificationArr.push(`header is ${options.headerRowNr} lines`);\n    // Should be included if header row is specified!\n    formatSpecificationArr.push('embedded labels');\n  }\n\n  if (options.delimiter) {\n    formatSpecificationArr.push(`delimiter is '${options.delimiter}'`);\n  }\n\n  if (options.characterSet && supportedCharacterSet(options.characterSet)) {\n    formatSpecificationArr.push(supportedCharacterSet(options.characterSet));\n  }\n\n  if (options.srcTable) {\n    formatSpecificationArr.push(`table is \"${escapeText(options.srcTable)}\"`);\n  }\n\n  if (options.noLabels) {\n    formatSpecificationArr.push('no labels');\n  }\n\n  let formatSpecificationString = '';\n\n  if (formatSpecificationArr.length > 0) {\n    formatSpecificationString = `\\n(${formatSpecificationArr.join(', ')})`;\n  }\n\n  return formatSpecificationString;\n}\n","import defaultConnectionMatcher from './default-connection-matcher';\nimport formatSpecification from './utils/format-specification';\nimport { escapeText, validFieldType, indentation } from './utils/utils';\n\nclass Table {\n  /**\n   * Table definition\n   * @public\n   * @class\n   * @param {Connection} connection\n   * @param {object} options - Table options\n   * @param {string} options.name - Table name\n   * @param {Field[]} options.fields - Array of field objects\n   * @param {string} options.prefix - Add prefix before the table\n   * @param {string} options.section - Section to add table to\n   * @constructor\n   */\n  constructor(connection, options) {\n    this.connection = defaultConnectionMatcher.findMatch(connection);\n\n    options = options || {};\n\n    if (typeof options === 'string') {\n      this.name = options;\n      options = {};\n    } else {\n      this.name = options.name;\n      this.fields = options.fields;\n      this.prefix = options.prefix;\n      if (options.section) {\n        this.section = options.section;\n      }\n    }\n\n    this.options = options;\n  }\n\n  /**\n   * @typedef {object} Field\n   * @public\n   * @property {string} src - Name in the data source of the field\n   * @property {string} name - Name after reload\n   * @property {string} type - Date, Time, TimeStamp\n   * @property {string} inputFormat - Input format to explain how a field should be parsed.\n   * @property {string} displayFormat - Display format that should be used after reload.\n   * @property {string} expr - Customize how this field should be loaded with Qlik Script.\n   */\n\n  /**\n   * Get the fields from a table\n   * @public\n   * @returns {Field[]} Array of fields\n   */\n  getFields() {\n    return this.fields;\n  }\n\n  /**\n   * Get the script representation of the field list. If nothing is specified than all the fields will be returned.\n   * @public\n   * @returns {string}\n   */\n  getFieldList() {\n    if (this.fields) {\n      return this.fields.map((field) => {\n        let formattedInput = `\"${escapeText(field.src || '')}\"`;\n\n        if (validFieldType(field.type)) {\n          const format = field.type.toUpperCase();\n\n          if (field.inputFormat) {\n            formattedInput = `${format}#(${formattedInput}, '${field.inputFormat}')`;\n          }\n\n          if (field.displayFormat) {\n            formattedInput = `${format}(${formattedInput}, '${field.displayFormat}')`;\n          } else {\n            formattedInput = `${format}(${formattedInput})`;\n          }\n        }\n\n        if (field.expr) {\n          formattedInput = field.expr;\n        }\n\n\n        if (!(field.name || field.src)) {\n          throw (new Error(`A name or src needs to specified on the field: ${JSON.stringify(field)}`));\n        }\n\n        return `${indentation() + formattedInput} AS \"${escapeText(field.name || field.src)}\"`;\n      }).join(',\\n');\n    }\n\n    return '*';\n  }\n\n  /**\n   * Is the table used as a proceeding load\n   * @public\n   * @returns {boolean}\n   */\n  isProceedingLoad() {\n    return this.connection instanceof Table;\n  }\n\n  /**\n   * Returns the specified prefix of the table if it exists.\n   * The prefix can be for instance be a Qlik script snippet that always should be executed before the table is loaded.\n   * @public\n   * @returns {string}\n   */\n  getPrefix() {\n    if (this.prefix) {\n      return `${this.prefix}\\n`;\n    }\n    return '';\n  }\n\n  /**\n   * Get the script representation of the table\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    // In the future this could be moved into a connectionMatcher\n    // but for sake of clarity it is kept inline.\n    if (this.isProceedingLoad()) {\n      return `${this.getPrefix()}LOAD\\n${this.getFieldList()};\\n${this.connection.getScript()}`;\n    }\n\n    // Hack!\n    if (this.connection.getFileExtension) {\n      this.options.fileExtension = this.connection.getFileExtension();\n    }\n\n    return `${this.getPrefix()}LOAD\\n${this.getFieldList()}\\n${this.connection.getScript()}${formatSpecification(this.options)};`;\n  }\n\n  /**\n   * Get the name of the table\n   * @public\n   * @returns {string}\n   */\n  getName() {\n    return this.name || '';\n  }\n\n  /**\n   * Get the section that the table belongs to\n   * @public\n   * @returns {string}\n   */\n  getSection() {\n    return this.section;\n  }\n\n  /**\n   * Returns the connection or table that the table uses.\n   * @public\n   * @returns {(Connection|Table)} Connection or Table\n   */\n  getConnection() {\n    return this.connection;\n  }\n}\n\nexport default Table;\n","/**\n * @constant\n * @type {{timestamp: string, date: string, time: string, interval: string}}\n */\nconst qTypes = {\n  timestamp: 'TS',\n  date: 'D',\n  time: 'T',\n  interval: 'IV',\n};\n\n/**\n * @constant\n * @type {{timestamp: string, text: string, numeric: string}}\n */\nconst qDimensionType = {\n  timestamp: 'T',\n  text: 'D',\n  numeric: 'N',\n};\n\nexport default {\n  qTypes,\n  qDimensionType,\n};\n","import hyperCubeSpecification from './hyper-cube-specification';\n\nconst DEFAULT_DELIMITER = ',';\n\n/**\n * If a dimension has mixed types\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeMixed(dimension) {\n  return (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qTags.length === 0\n  );\n}\n\n/**\n * Is dimension type a text\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeText(dimension) {\n  return dimension.qDimensionType === hyperCubeSpecification.qDimensionType.text;\n}\n\n/**\n * Is dimension type a timestamp\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeTimestamp(dimension) {\n  if (dimension.qDimensionType === hyperCubeSpecification.qDimensionType.timestamp) {\n    return true;\n  }\n  if (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.timestamp\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Is dimension type a date\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeDate(dimension) {\n  if (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.date\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Is dimension type a time\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeTime(dimension) {\n  if (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.time\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Is dimension type an interval\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {boolean}\n */\nfunction isDimensionTypeInterval(dimension) {\n  if (\n    dimension.qDimensionType === hyperCubeSpecification.qDimensionType.numeric\n    && dimension.qNumFormat.qType === hyperCubeSpecification.qTypes.interval\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Get dimension type where the dimension matches one of the following text, mixed, timestamp, time, data, interval or num.\n * @private\n * @param {QAE.NxDimension} dimension\n * @returns {string}\n */\nexport function getDimensionType(dimension) {\n  if (isDimensionTypeText(dimension)) {\n    return 'text';\n  }\n  if (isDimensionTypeMixed(dimension)) {\n    return 'mixed';\n  }\n  if (isDimensionTypeTimestamp(dimension)) {\n    return 'timestamp';\n  }\n  if (isDimensionTypeTime(dimension)) {\n    return 'time';\n  }\n  if (isDimensionTypeDate(dimension)) {\n    return 'date';\n  }\n  if (isDimensionTypeInterval(dimension)) {\n    return 'interval';\n  }\n  return 'num';\n}\n\n/**\n * Is numeric dimension type\n * @private\n * @param {string} dimensionType\n * @returns {boolean}\n */\nfunction isNumericDimensionType(dimensionType) {\n  const numericDimensionTypes = [\n    'timestamp',\n    'interval',\n    'time',\n    'date',\n    'num',\n  ];\n  dimensionType = dimensionType || '';\n  return numericDimensionTypes.indexOf(dimensionType.toLowerCase()) > -1;\n}\n\n/**\n * Is field numeric\n * @private\n * @param {QAE.NxField} field\n * @returns {boolean}\n */\nfunction storeNumeric(field) {\n  if (field.type === 'measure') {\n    return true;\n  }\n  if (\n    field.type === 'dimension' && isNumericDimensionType(field.dimensionType)\n  ) {\n    return true;\n  }\n  return false;\n}\n\n/**\n * Check if field is a dual value\n * @private\n * @param {Field} field\n * @returns {boolean}\n */\nexport function checkIfFieldIsDual(field) {\n  return field.type === 'dimension' && field.dimensionType === 'num';\n}\n\n/**\n * Has cell a dual value\n * @private\n * @param {QAE.NxCell} cell\n * @param {Field} field\n * @returns {boolean}\n */\nexport function isCellDual(cell, field) {\n  return checkIfFieldIsDual(field) && cell.qText !== Number(cell.qNum).toString();\n}\n\n/**\n * Escape string containing delimiter\n * @private\n * @param {string} string\n * @param {string} delimiter\n * @returns {string}\n */\nfunction escapeStringContainingDelimiter(string, delimiter) {\n  if (string.indexOf(delimiter) > -1 || string.indexOf('\\n') > -1) {\n    return `'${string.replace(/'/g, \"''\").replace(/\\n/g, ' ')}'`;\n  }\n  return string;\n}\n\n/**\n * Get the numeric from cell value\n * @private\n * @param {QAE.NxCell} cell\n * @returns {number}\n */\nfunction getNumericCellValue(cell) {\n  return cell.qNum;\n}\n\n/**\n * Get the text from a cell value\n * @private\n * @param {QAE.NxCell} cell\n * @returns {string}\n */\nfunction getTextCellValue(cell) {\n  return escapeStringContainingDelimiter(cell.qText, DEFAULT_DELIMITER);\n}\n\n/**\n * Get the value of a cell\n * @private\n * @param {QAE.NxCell} cell\n * @param {Field} field\n * @returns {(string|number)}\n */\nexport function getCellValue(cell, field) {\n  if (storeNumeric(field)) {\n    return getNumericCellValue(cell);\n  }\n  return getTextCellValue(cell);\n}\n\n/**\n * Get dual data row\n * @private\n * @param {QAE.NxCell} cell\n * @returns {string}\n */\nexport function getDualDataRow(cell) {\n  return `${cell.qNum}${DEFAULT_DELIMITER}${escapeStringContainingDelimiter(cell.qText, DEFAULT_DELIMITER)}`;\n}\n\n/**\n * Get dual headers from a field\n * @private\n * @param {Field} field\n * @returns {string}\n */\nexport function getDualHeadersForField(field) {\n  return `${field.name}${DEFAULT_DELIMITER}${field.name}_qText}`;\n}\n","import Table from './table';\nimport { validFieldType } from './utils/utils';\nimport * as HyperCubeUtils from './utils/hyper-cube-utils';\n\nclass HyperCube {\n  /**\n   * Hypercube representation\n   * @public\n   * @class\n   * @param {object} hyperCubeLayout - The QIX representation of a hypercube\n   * @param {object} options - Hypercube options\n   * @param {string} name - Name\n   * @param {string} section - Section to add hypercube data to\n   * @constructor\n   */\n  constructor(hyperCubeLayout, options) {\n    this.items = [];\n    this.fields = [];\n    this.hyperCubeLayout = this.validateHyperCubeLayout(hyperCubeLayout);\n\n    options = options || {};\n\n    if (typeof options === 'string') {\n      this.name = options;\n      options = {};\n    } else {\n      this.name = options.name;\n      if (options.section) {\n        this.section = options.section;\n      }\n    }\n\n    this.parseHyperCubeLayout(options);\n\n    this.options = options;\n  }\n\n  /**\n   * Validate the hypercube layout\n   * @private\n   * @param {object} hyperCubeLayout\n   * @returns {object} hyperCubeLayout\n   */\n  validateHyperCubeLayout(hyperCubeLayout) {\n    if (!hyperCubeLayout) { throw new Error('Hyper cube layout is undefined'); }\n    if (!hyperCubeLayout.qDimensionInfo) { throw new Error('qDimensionInfo is undefined'); }\n    if (!hyperCubeLayout.qMeasureInfo) { throw new Error('qMeasureInfo is undefined'); }\n    if (hyperCubeLayout.qMode === 'P') { throw new Error('Cannot add hyper cube in pivot mode, qMode:P(DATA_MODE_PIVOT) is not supported'); }\n    if (hyperCubeLayout.qMode === 'K') { throw new Error('Cannot add hyper cube in stacked mode, qMode:K(DATA_MODE_PIVOT_STACK) is not supported'); }\n    if (hyperCubeLayout.qMode === 'S') {\n      this.validateDataPages(hyperCubeLayout.qDataPages);\n      this.validateDataPagesCoverage(hyperCubeLayout.qDataPages, hyperCubeLayout);\n      return hyperCubeLayout;\n    }\n    throw new Error('HyperCubeLayout is not valid');\n  }\n\n  /**\n   * Validates the datapages of the hypercube\n   * @private\n   * @param {object} dataPages\n   */\n  validateDataPages(dataPages) {\n    if (!dataPages) {\n      throw new Error('qDataPages are undefined');\n    }\n\n    if (dataPages[0].qArea && dataPages[0].qArea.qTop > 0) {\n      throw new Error('qDataPages first page should start at qTop: 0.');\n    }\n  }\n\n  /**\n   * Validates that all datapages in the hypercube is covered\n   * @private\n   * @param {object[]} dataPages\n   * @param {object} hyperCubeLayout\n   */\n  validateDataPagesCoverage(dataPages, hyperCubeLayout) {\n    let qHeight = 0;\n\n    dataPages.forEach((dataPage) => {\n      this.validateQMatrix(dataPage);\n      this.validateQArea(dataPage, hyperCubeLayout, qHeight);\n      qHeight += dataPage.qArea.qHeight;\n    }, this);\n\n    if (hyperCubeLayout.qSize.qcy !== qHeight) {\n      throw new Error('qDataPages are missing pages.');\n    }\n  }\n\n  /**\n   * Validates the QMatrix in the datapage\n   * @private\n   * @param {object} dataPage\n   */\n  validateQMatrix(dataPage) {\n    if (!dataPage.qMatrix) {\n      throw new Error('qMatrix of qDataPages are undefined');\n    }\n    if (dataPage.qMatrix.length === 0) {\n      throw new Error('qDataPages are empty');\n    }\n  }\n\n  /**\n   * Validates the QArea in the datapage\n   * @private\n   * @param {object} dataPage\n   * @param {object} hyperCubeLayout\n   * @param {number} qHeight\n   */\n  validateQArea(dataPage, hyperCubeLayout, qHeight) {\n    if (!dataPage.qArea) {\n      throw new Error('qArea of qDataPages are undefined');\n    }\n    if (dataPage.qArea.qLeft > 0) {\n      throw new Error('qDataPages have data pages that\\'s not of full qWidth.');\n    }\n    if (dataPage.qArea.qWidth < hyperCubeLayout.qSize.qcx) {\n      throw new Error('qDataPages have data pages that\\'s not of full qWidth.');\n    }\n    if (dataPage.qArea.qTop < qHeight) {\n      throw new Error('qDataPages have overlapping data pages.');\n    }\n    if (dataPage.qArea.qTop > qHeight) {\n      throw new Error('qDataPages are missing pages.');\n    }\n  }\n\n  /**\n   * Parses the hypercube an extracts the data\n   * @private\n   */\n  parseHyperCubeLayout() {\n    const that = this;\n    that.fields = that.getFieldsFromHyperCubeLayout();\n    that.data = that.getDataFromHyperCubeLayout();\n    const inlineData = `${that.fields\n      .map(field => field.name)\n      .join(',')}\\n${this.data}`;\n    let hasDual = false;\n    that.fields.forEach((field) => {\n      if (field.isDual) {\n        hasDual = true;\n        that.items.push(that.getMapTableForDualField(field));\n      }\n    });\n    const options = {\n      name: that.name,\n      fields: that.getFieldsDefinition(that.fields),\n    };\n    if (that.section && !hasDual) {\n      options.section = that.section;\n    }\n    that.items.push(new Table(inlineData, options));\n  }\n\n  /**\n   * Get the Fields definition\n   * @private\n   * @param {object[]} fields\n   * @returns {object[]} fields\n   */\n  getFieldsDefinition(fields) {\n    return fields.map((field) => {\n      const mappedField = { name: field.name };\n      if (validFieldType(field.dimensionType)) {\n        mappedField.type = field.dimensionType;\n        mappedField.displayFormat = field.displayFormat;\n      }\n      if (field.isDual) {\n        mappedField.expr = `Dual(ApplyMap('MapDual__${field.name}', \"${field.name}\"), \"${field.name}\")`;\n      } else {\n        mappedField.src = field.name;\n      }\n      return mappedField;\n    });\n  }\n\n  /**\n   * Return qmatrix with dual fields\n   * @private\n   * @param {object} qMatrix\n   * @param {object} field\n   * @returns {object} field\n   */\n  mapDualFieldQMatrix(qMatrix, field) {\n    function uniqueFilter(value, index, self) {\n      return self.indexOf(value) === index;\n    }\n    return qMatrix\n      .map(row => HyperCubeUtils.getDualDataRow(row[field.index]))\n      .filter(uniqueFilter);\n  }\n\n  /**\n   * Get table with dual fields\n   * @private\n   * @param {object} field\n   * @returns {object} Table\n   */\n  getMapTableForDualField(field) {\n    const that = this;\n    const concatQMatrix = that.hyperCubeLayout.qDataPages.reduce(\n      (prev, curr) => [...prev, ...curr.qMatrix],\n      [],\n    );\n    const data = that.mapDualFieldQMatrix(concatQMatrix, field);\n    const headers = HyperCubeUtils.getDualHeadersForField(field);\n    const inlineData = `${headers}\\n${data.join('\\n')}`;\n    const name = `MapDual__${field.name}`;\n    const options = { name, prefix: 'Mapping' };\n    if (this.section && this.items.length === 0) {\n      options.section = this.section;\n    }\n    return new Table(inlineData, options);\n  }\n\n  /**\n   * Extracts the data from the hypercube layout as a csv representation\n   * @private\n   * @returns {string}\n   */\n  getDataFromHyperCubeLayout() {\n    const that = this;\n    const data = that.hyperCubeLayout.qDataPages\n      .map(dataPage => dataPage.qMatrix\n        .map(row => row\n          .map((cell, index) => {\n            const field = that.fields[index];\n            if (!field.isDual && HyperCubeUtils.isCellDual(cell, field)) {\n              field.isDual = true;\n            }\n            return HyperCubeUtils.getCellValue(cell, field);\n          })\n          .join(','))\n        .join('\\n'))\n      .join('\\n');\n    return data;\n  }\n\n  /**\n   * Get the fields from the hypercube\n   * @private\n   * @returns {Array<{type: string, dimensionType: string, name: string, displayFormat: string, index: number}>} - An array of dimension and measures\n   */\n  getFieldsFromHyperCubeLayout() {\n    const that = this;\n    const fields = [];\n    for (let i = 0; i < that.hyperCubeLayout.qDimensionInfo.length; i += 1) {\n      fields.push({\n        type: 'dimension',\n        dimensionType: HyperCubeUtils.getDimensionType(that.hyperCubeLayout.qDimensionInfo[i]),\n        name: that.hyperCubeLayout.qDimensionInfo[i].qFallbackTitle,\n        displayFormat: that.hyperCubeLayout.qDimensionInfo[i].qNumFormat.qFmt,\n        index: i,\n      });\n    }\n    for (let j = 0; j < that.hyperCubeLayout.qMeasureInfo.length; j += 1) {\n      fields.push({\n        type: 'measure',\n        name: that.hyperCubeLayout.qMeasureInfo[j].qFallbackTitle,\n        index: that.hyperCubeLayout.qDimensionInfo.length + j,\n      });\n    }\n    return fields;\n  }\n\n  /**\n   * Get tables from the hypercube\n   * @public\n   * @returns {object[]} Tables\n   */\n  getItems() {\n    return this.items;\n  }\n}\n\nexport default HyperCube;\n","class SetStatement {\n  /**\n   * Define set statements\n   * @class\n   * @public\n   * @param {object} defaultSetStatements - A representation where each property name will be used as key and the property will be the value\n   * @constructor\n   */\n  constructor(defaultSetStatements) {\n    this.defaultSetStatements = defaultSetStatements;\n  }\n\n  /**\n   * Get the entire set statement as script\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    return Object.keys(this.defaultSetStatements)\n      .map(key => `SET ${key}='${Array.isArray(this.defaultSetStatements[key])\n        ? this.defaultSetStatements[key].join(';') : this.defaultSetStatements[key]}';`)\n      .join('\\n');\n  }\n\n  /**\n   * Always returns the name as empty\n   * @public\n   * @returns {string}\n   */\n  getName() {\n    return '';\n  }\n}\n\nexport default SetStatement;\n","import { getFieldName, escapeText } from './utils/utils';\n\nclass DerivedFieldsTemplate {\n  /**\n   * Declare fields that can be derived from a template. An example can be a calendar template.\n   * @public\n   * @param {object} options - Derived Field Template definition.\n   * @param {callback} options.fieldMatchFunction - Matching function that will apply a field template definition.\n   * @param {string} options.name - Name of derived field.\n   * @param {string} options.fieldTag - What field tag that will be used in the derived field.\n   * @param {string} options.derivedFieldDefinition - What script definition should be used in the derived field.\n   * @constructor\n   */\n  constructor(options) {\n    this.getFieldFn = options.fieldMatchFunction;\n    this.name = options.name;\n    this.fieldTag = options.fieldTag;\n    this.derivedFieldDefinition = options.derivedFieldDefinition;\n  }\n\n  /**\n   * Returns the script\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    const fields = this.getFieldFn() || [];\n\n    if (fields.length > 0) {\n      return this.getDefinition(fields.map(getFieldName));\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Get the script definition for a set of specific fields\n   * @public\n   * @param {string[]} fieldNames - An array of strings with field names.\n   * @returns {string}\n   */\n  getDefinition(fieldNames) {\n    return `\"${escapeText(this.name)}\":\nDECLARE FIELD DEFINITION Tagged ('$${this.fieldTag}')\nFIELDS\n${this.derivedFieldDefinition}\nDERIVE FIELDS FROM FIELDS [${fieldNames.join(', ')}] USING \"${escapeText(this.name)}\";`;\n  }\n}\n\nexport default DerivedFieldsTemplate;\n","import DerivedFieldTemplate from './derived-fields-template';\n\nconst derivedFieldsDefinition = `Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),\n  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$quarter', '$cyclic'),\n  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$yearquarter', '$qualified'),\n  Dual('Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [_YearQuarter] Tagged ('$yearquarter', '$hidden', '$simplified'),\n  Month($1) AS [Month] Tagged ('$month', '$cyclic'),\n  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth', '$qualified'),\n  Dual(Month($1), monthstart($1)) AS [_YearMonth] Tagged ('$axis', '$yearmonth', '$simplified', '$hidden'),\n  Dual('W'&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$weeknumber', '$cyclic'),\n  Date(Floor($1)) AS [Date] Tagged ('$axis', '$date', '$qualified'),\n  Date(Floor($1), 'D') AS [_Date] Tagged ('$axis', '$date', '$hidden', '$simplified'),\n  If (DayNumberOfYear($1) <= DayNumberOfYear(Today()), 1, 0) AS [InYTD] ,\nYear(Today())-Year($1) AS [YearsAgo] ,\n  If (DayNumberOfQuarter($1) <= DayNumberOfQuarter(Today()),1,0) AS [InQTD] ,\n4*Year(Today())+Ceil(Month(Today())/3)-4*Year($1)-Ceil(Month($1)/3) AS [QuartersAgo] ,\nCeil(Month(Today())/3)-Ceil(Month($1)/3) AS [QuarterRelNo] ,\n  If(Day($1)<=Day(Today()),1,0) AS [InMTD] ,\n12*Year(Today())+Month(Today())-12*Year($1)-Month($1) AS [MonthsAgo] ,\nMonth(Today())-Month($1) AS [MonthRelNo] ,\n  If(WeekDay($1)<=WeekDay(Today()),1,0) AS [InWTD] ,\n(WeekStart(Today())-WeekStart($1))/7 AS [WeeksAgo] ,\nWeek(Today())-Week($1) AS [WeekRelNo];`;\n\n/**\n * A field matching callback to identify which fields that are associated with a specific calendarTemplate.\n * @callback fieldMatchingCalendarCallback\n * @param {string} calendarTemplate\n * @param {Field} field\n */\n\n/**\n * Get the derived field definition for a field that matches the pattern\n * @public\n * @param {fieldMatchingCalendarCallback} fn - Field matcher function\n * @returns {DerivedFieldsTemplate}\n */\nfunction getCalenderDerivedFieldDefinition(fn) {\n  return new DerivedFieldTemplate({\n    name: 'autoCalendar',\n    fieldTag: 'date',\n    derivedFieldDefinition: derivedFieldsDefinition,\n    fieldMatchFunction: () => fn(f => f.calendarTemplate),\n  });\n}\n\nexport default getCalenderDerivedFieldDefinition;\n","import Table from './table';\nimport HyperCube from './hyper-cube';\nimport Connections from './connections';\nimport SetStatement from './set-statement';\n\nimport * as Utils from './utils/utils';\nimport getDerivedFieldDefinition from './calendar-derived-fields';\n\nconst SCRIPT_BLOCK_SPACING = '\\n\\n';\n\nclass Halyard {\n  /**\n   * Representation of tables or hypercubes to load\n   * @class\n   * @public\n   * @constructor\n   */\n  constructor() {\n    this.defaultSetStatements = {};\n    this.items = [];\n    this.addItem(new SetStatement(this.defaultSetStatements));\n    this.lastItems = [getDerivedFieldDefinition(x => this.getFields(x))];\n  }\n\n  /**\n   * Get connections object that are used in the model\n   * @public\n   * @returns {Connection[]}\n   */\n  getConnections() {\n    return this.items.filter(item => item.getConnection).map(item => item.getConnection());\n  }\n\n  /**\n   * Get the QIX connections definitions that are used in the model\n   * @public\n   * @returns {{qName: (string), qConnectionString: (string), qType: (string)}\n   */\n  getQixConnections() {\n    return this.getConnections().map(connection => connection.getQixConnectionObject())\n      .filter(connection => connection);\n  }\n\n  /**\n   * Field matching callback to identify if a field matches another\n   * @callback fieldMatchingCallback\n   * @param {Field} field\n   * @returns {boolean}\n   */\n\n  /**\n   * Get fields that matches pattern sent in as params\n   * @public\n   * @param {fieldMatchingCallback} matcherFn\n   * @returns {Field[]}\n   */\n  getFields(matcherFn) {\n    matcherFn = matcherFn || (() => true);\n\n    const fields = [];\n\n    this.items.forEach((item) => {\n      if (item.getFields && item.getFields()) {\n        fields.push(...item.getFields().filter(matcherFn));\n      }\n    });\n\n    return fields;\n  }\n\n  /**\n   * Configure the default set statements like time, date, currency formats\n   * @public\n   * @param {SetStatement} defaultSetStatements\n   * @param {boolean} preservePreviouslyEnteredValues\n   */\n  setDefaultSetStatements(defaultSetStatements, preservePreviouslyEnteredValues) {\n    const that = this;\n\n    Object.keys(defaultSetStatements).forEach((key) => {\n      if (!(preservePreviouslyEnteredValues && that.defaultSetStatements[key])) {\n        that.defaultSetStatements[key] = defaultSetStatements[key];\n      }\n    });\n  }\n\n  /**\n   * Get the script for a item (table, preceeding load)\n   * @public\n   * @param {(Table|HyperCube)} item\n   * @returns {string}\n   */\n  getItemScript(item) {\n    let itemScript = item.getScript();\n\n    if (item.getName && item.getName()) {\n      if (item.section) {\n        itemScript = `///$tab ${Utils.escapeText(item.section)}\\n\"${Utils.escapeText(item.getName())}\":\\n${itemScript}`;\n      } else {\n        itemScript = `\"${Utils.escapeText(item.getName())}\":\\n${itemScript}`;\n      }\n    }\n\n    return itemScript;\n  }\n\n  /**\n   * Fetch all script blocks\n   * @public\n   * @returns {string[]}\n   */\n  getAllScriptBlocks() {\n    return this.items.concat(this.lastItems).filter(item => item.getScript());\n  }\n\n  /**\n   * Fetches the entire script\n   * @public\n   * @returns {string}\n   */\n  getScript() {\n    return this.getAllScriptBlocks().map(item => this.getItemScript(item))\n      .join(SCRIPT_BLOCK_SPACING);\n  }\n\n  /**\n   * Add hyper cube explicit or implicitly\n   * @public\n   * @param {HyperCube} arg1 - Hypercube\n   * @param {object} options - Hypercube options\n   * @param {string} options.name - Name\n   * @param {string} options.section - Section to add hypercube data to\n   * @returns {object} Hypercube\n   */\n  addHyperCube(arg1, options) {\n    let newHyperCube;\n\n    if (arg1 instanceof HyperCube) {\n      newHyperCube = arg1;\n    } else {\n      newHyperCube = new HyperCube(arg1, options);\n    }\n\n    for (let i = 0; i < newHyperCube.items.length; i += 1) {\n      this.checkIfItemNameExists(newHyperCube.items[i]);\n    }\n\n    for (let i = 0; i < newHyperCube.items.length; i += 1) {\n      this.addItem(newHyperCube.items[i]);\n    }\n\n    return newHyperCube;\n  }\n\n  /**\n   * Support to add table explicit or implicitly\n   * @public\n   * @param {Table} arg1 - Table\n   * @param {object} options\n   * @param {string} options.name - Table name\n   * @param {Field[]} options.fields - Array of field objects\n   * @param {string} options.prefix - Add prefix before the table\n   * @param {string} options.section - Section to add table to\n   * @returns {object} Table\n   */\n  addTable(arg1, options) {\n    let newTable;\n\n    if (arg1 instanceof Table) {\n      newTable = arg1;\n    } else {\n      newTable = new Table(arg1, options);\n    }\n\n    return this.addItem(newTable);\n  }\n\n  /**\n   * Verify that item doesn't exist in model\n   * @public\n   * @param {(Table|HyperCube)} newItem - Table or Hypercube\n   */\n  checkIfItemNameExists(newItem) {\n    if (newItem.getName && newItem.getName()) {\n      if (this.items.filter(item => item.getName() === newItem.getName()).length > 0) {\n        throw new Error('Cannot add another table with the same name.');\n      }\n    }\n  }\n\n  /**\n   * Add new item to the model\n   * @public\n   * @param {(Table|HyperCube)} newItem - Table or Hypercube\n   * @returns {(Table|HyperCube)} - Table or Hypercube\n   */\n  addItem(newItem) {\n    this.checkIfItemNameExists(newItem);\n\n    this.items.push(newItem);\n\n    return newItem;\n  }\n\n  /**\n   * Locate which item that generated a script at the specified character position\n   * @public\n   * @param {number} charPosition\n   * @returns {(Table|HyperCube)} - Table or Hypercube\n   */\n  getItemThatGeneratedScriptAt(charPosition) {\n    const allScriptBlocks = this.getAllScriptBlocks();\n    let scriptBlockStartPosition = 0;\n\n    for (let i = 0; i < allScriptBlocks.length; i += 1) {\n      const itemScript = this.getItemScript(allScriptBlocks[i]);\n      const scriptBlockEndPosition = scriptBlockStartPosition\n          + (`${itemScript}${SCRIPT_BLOCK_SPACING}`).length;\n\n      if (scriptBlockStartPosition <= charPosition && charPosition <= scriptBlockEndPosition) {\n        return allScriptBlocks[i];\n      }\n\n      scriptBlockStartPosition = scriptBlockEndPosition;\n    }\n\n    return undefined;\n  }\n}\n\nHalyard.Table = Table;\n\nHalyard.HyperCube = HyperCube;\n\nHalyard.Connections = Connections;\n\nexport default Halyard;\n\nif (typeof module !== 'undefined') {\n  module.exports = Halyard;\n}\n"],"names":["Utils.folderPath","Utils.fileName","Utils.fileExtension","Utils.escapeText","WebConnection","ConnectionMatcher","JsonToCsv.isJson","JsonToCsv.convert","defaultConnectionMatcher","HyperCubeUtils.getDualDataRow","HyperCubeUtils.getDualHeadersForField","HyperCubeUtils.isCellDual","HyperCubeUtils.getCellValue","HyperCubeUtils.getDimensionType","DerivedFieldTemplate","getDerivedFieldDefinition"],"mappings":"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"}